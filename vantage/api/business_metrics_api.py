# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vantage.api_client import ApiClient


class BusinessMetricsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_business_metric(self, create_business_metric, **kwargs):  # noqa: E501
        """create_business_metric  # noqa: E501

        Create a new BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_business_metric(create_business_metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBusinessMetric create_business_metric: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_business_metric_with_http_info(create_business_metric, **kwargs)  # noqa: E501
        else:
            (data) = self.create_business_metric_with_http_info(create_business_metric, **kwargs)  # noqa: E501
            return data

    def create_business_metric_with_http_info(self, create_business_metric, **kwargs):  # noqa: E501
        """create_business_metric  # noqa: E501

        Create a new BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_business_metric_with_http_info(create_business_metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBusinessMetric create_business_metric: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_business_metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_business_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_business_metric' is set
        if self.api_client.client_side_validation and ('create_business_metric' not in params or
                                                       params['create_business_metric'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_business_metric` when calling `create_business_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_business_metric' in params:
            body_params = params['create_business_metric']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_business_metric(self, business_metric_token, **kwargs):  # noqa: E501
        """delete_business_metric  # noqa: E501

        Deletes an existing BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_business_metric(business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_business_metric_with_http_info(business_metric_token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_business_metric_with_http_info(business_metric_token, **kwargs)  # noqa: E501
            return data

    def delete_business_metric_with_http_info(self, business_metric_token, **kwargs):  # noqa: E501
        """delete_business_metric  # noqa: E501

        Deletes an existing BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_business_metric_with_http_info(business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_metric_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_business_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'business_metric_token' is set
        if self.api_client.client_side_validation and ('business_metric_token' not in params or
                                                       params['business_metric_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_metric_token` when calling `delete_business_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'business_metric_token' in params:
            path_params['business_metric_token'] = params['business_metric_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics/{business_metric_token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_business_metric(self, business_metric_token, **kwargs):  # noqa: E501
        """get_business_metric  # noqa: E501

        Return a BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_business_metric(business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_business_metric_with_http_info(business_metric_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_business_metric_with_http_info(business_metric_token, **kwargs)  # noqa: E501
            return data

    def get_business_metric_with_http_info(self, business_metric_token, **kwargs):  # noqa: E501
        """get_business_metric  # noqa: E501

        Return a BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_business_metric_with_http_info(business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_metric_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_business_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'business_metric_token' is set
        if self.api_client.client_side_validation and ('business_metric_token' not in params or
                                                       params['business_metric_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_metric_token` when calling `get_business_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'business_metric_token' in params:
            path_params['business_metric_token'] = params['business_metric_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics/{business_metric_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_business_metric_values(self, business_metric_token, **kwargs):  # noqa: E501
        """get_business_metric_values  # noqa: E501

        Return values of a BusinessMetric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_business_metric_values(business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :param date start_date: Query BusinessMetrics by the first date you would like to filter from. ISO 8601 Formatted - 2021-07-15
        :return: BusinessMetricValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_business_metric_values_with_http_info(business_metric_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_business_metric_values_with_http_info(business_metric_token, **kwargs)  # noqa: E501
            return data

    def get_business_metric_values_with_http_info(self, business_metric_token, **kwargs):  # noqa: E501
        """get_business_metric_values  # noqa: E501

        Return values of a BusinessMetric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_business_metric_values_with_http_info(business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :param date start_date: Query BusinessMetrics by the first date you would like to filter from. ISO 8601 Formatted - 2021-07-15
        :return: BusinessMetricValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_metric_token', 'page', 'limit', 'start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_business_metric_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'business_metric_token' is set
        if self.api_client.client_side_validation and ('business_metric_token' not in params or
                                                       params['business_metric_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_metric_token` when calling `get_business_metric_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'business_metric_token' in params:
            path_params['business_metric_token'] = params['business_metric_token']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics/{business_metric_token}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetricValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_business_metrics(self, **kwargs):  # noqa: E501
        """get_business_metrics  # noqa: E501

        Return all BusinessMetrics that the current API token has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_business_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: BusinessMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_business_metrics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_business_metrics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_business_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """get_business_metrics  # noqa: E501

        Return all BusinessMetrics that the current API token has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_business_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: BusinessMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_business_metrics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_business_metric(self, business_metric_token, update_business_metric, **kwargs):  # noqa: E501
        """update_business_metric  # noqa: E501

        Updates an existing BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_business_metric(business_metric_token, update_business_metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :param UpdateBusinessMetric update_business_metric: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_business_metric_with_http_info(business_metric_token, update_business_metric, **kwargs)  # noqa: E501
        else:
            (data) = self.update_business_metric_with_http_info(business_metric_token, update_business_metric, **kwargs)  # noqa: E501
            return data

    def update_business_metric_with_http_info(self, business_metric_token, update_business_metric, **kwargs):  # noqa: E501
        """update_business_metric  # noqa: E501

        Updates an existing BusinessMetric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_business_metric_with_http_info(business_metric_token, update_business_metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_metric_token: (required)
        :param UpdateBusinessMetric update_business_metric: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_metric_token', 'update_business_metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_business_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'business_metric_token' is set
        if self.api_client.client_side_validation and ('business_metric_token' not in params or
                                                       params['business_metric_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_metric_token` when calling `update_business_metric`")  # noqa: E501
        # verify the required parameter 'update_business_metric' is set
        if self.api_client.client_side_validation and ('update_business_metric' not in params or
                                                       params['update_business_metric'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_business_metric` when calling `update_business_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'business_metric_token' in params:
            path_params['business_metric_token'] = params['business_metric_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_business_metric' in params:
            body_params = params['update_business_metric']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics/{business_metric_token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_business_metric_values_csv(self, csv, business_metric_token, **kwargs):  # noqa: E501
        """update_business_metric_values_csv  # noqa: E501

        Updates the values for an existing BusinessMetric from a CSV file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_business_metric_values_csv(csv, business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file csv: CSV file containing BusinessMetric dates and amounts (required)
        :param str business_metric_token: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_business_metric_values_csv_with_http_info(csv, business_metric_token, **kwargs)  # noqa: E501
        else:
            (data) = self.update_business_metric_values_csv_with_http_info(csv, business_metric_token, **kwargs)  # noqa: E501
            return data

    def update_business_metric_values_csv_with_http_info(self, csv, business_metric_token, **kwargs):  # noqa: E501
        """update_business_metric_values_csv  # noqa: E501

        Updates the values for an existing BusinessMetric from a CSV file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_business_metric_values_csv_with_http_info(csv, business_metric_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file csv: CSV file containing BusinessMetric dates and amounts (required)
        :param str business_metric_token: (required)
        :return: BusinessMetric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['csv', 'business_metric_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_business_metric_values_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'csv' is set
        if self.api_client.client_side_validation and ('csv' not in params or
                                                       params['csv'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `csv` when calling `update_business_metric_values_csv`")  # noqa: E501
        # verify the required parameter 'business_metric_token' is set
        if self.api_client.client_side_validation and ('business_metric_token' not in params or
                                                       params['business_metric_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_metric_token` when calling `update_business_metric_values_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'business_metric_token' in params:
            path_params['business_metric_token'] = params['business_metric_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'csv' in params:
            local_var_files['csv'] = params['csv']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/business_metrics/{business_metric_token}/values.csv', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessMetric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
