# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vantage.api_client import ApiClient


class TagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_tag_values(self, key, **kwargs):  # noqa: E501
        """get_tag_values  # noqa: E501

        Returns corresponding TagValues for a given Tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_values(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: The key of the Tag for which you would like to retrieve TagValues. (required)
        :param list[str] providers: An array of providers to scope TagValues by.
        :param str sort_direction: The direction in which to sort the TagValues. Defaults to 'asc'.
        :param str search_query: A search query to filter TagValues by the value name.
        :param int page: The page of results to return.
        :param int limit: The number of results to return per page. Defaults to 100. The maximum is 1000.
        :return: TagValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tag_values_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tag_values_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_tag_values_with_http_info(self, key, **kwargs):  # noqa: E501
        """get_tag_values  # noqa: E501

        Returns corresponding TagValues for a given Tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_values_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: The key of the Tag for which you would like to retrieve TagValues. (required)
        :param list[str] providers: An array of providers to scope TagValues by.
        :param str sort_direction: The direction in which to sort the TagValues. Defaults to 'asc'.
        :param str search_query: A search query to filter TagValues by the value name.
        :param int page: The page of results to return.
        :param int limit: The number of results to return per page. Defaults to 100. The maximum is 1000.
        :return: TagValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'providers', 'sort_direction', 'search_query', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tag_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `get_tag_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'providers' in params:
            query_params.append(('providers', params['providers']))  # noqa: E501
            collection_formats['providers'] = 'csv'  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('search_query', params['search_query']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/tags/{key}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TagValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tags(self, **kwargs):  # noqa: E501
        """get_tags  # noqa: E501

        Return all Tags that the current API token has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] providers: An array of providers to scope Tags by.
        :param str search_query: A search query to filter Tags by tag key.
        :param str sort_direction: The direction in which you would like to sort the data by. Defaults to 'asc'.
        :param int page: The page of results to return.
        :param int limit: The number of results to return per page. Defaults to 100. The maximum is 1000.
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tags_with_http_info(self, **kwargs):  # noqa: E501
        """get_tags  # noqa: E501

        Return all Tags that the current API token has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] providers: An array of providers to scope Tags by.
        :param str search_query: A search query to filter Tags by tag key.
        :param str sort_direction: The direction in which you would like to sort the data by. Defaults to 'asc'.
        :param int page: The page of results to return.
        :param int limit: The number of results to return per page. Defaults to 100. The maximum is 1000.
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers', 'search_query', 'sort_direction', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'providers' in params:
            query_params.append(('providers', params['providers']))  # noqa: E501
            collection_formats['providers'] = 'csv'  # noqa: E501
        if 'search_query' in params:
            query_params.append(('search_query', params['search_query']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tag(self, update_tag, **kwargs):  # noqa: E501
        """update_tag  # noqa: E501

        Updates an existing Tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tag(update_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTag update_tag: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tag_with_http_info(update_tag, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tag_with_http_info(update_tag, **kwargs)  # noqa: E501
            return data

    def update_tag_with_http_info(self, update_tag, **kwargs):  # noqa: E501
        """update_tag  # noqa: E501

        Updates an existing Tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tag_with_http_info(update_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTag update_tag: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_tag' is set
        if self.api_client.client_side_validation and ('update_tag' not in params or
                                                       params['update_tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_tag` when calling `update_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_tag' in params:
            body_params = params['update_tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
