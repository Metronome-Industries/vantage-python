# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vantage.api_client import ApiClient


class CostsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cost_report(self, create_cost_report, **kwargs):  # noqa: E501
        """create_cost_report  # noqa: E501

        Create a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cost_report(create_cost_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCostReport create_cost_report: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cost_report_with_http_info(create_cost_report, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cost_report_with_http_info(create_cost_report, **kwargs)  # noqa: E501
            return data

    def create_cost_report_with_http_info(self, create_cost_report, **kwargs):  # noqa: E501
        """create_cost_report  # noqa: E501

        Create a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cost_report_with_http_info(create_cost_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCostReport create_cost_report: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_cost_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cost_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_cost_report' is set
        if self.api_client.client_side_validation and ('create_cost_report' not in params or
                                                       params['create_cost_report'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_cost_report` when calling `create_cost_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_cost_report' in params:
            body_params = params['create_cost_report']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/cost_reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dashboard(self, create_dashboard, **kwargs):  # noqa: E501
        """create_dashboard  # noqa: E501

        Create a Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dashboard(create_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDashboard create_dashboard: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dashboard_with_http_info(create_dashboard, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dashboard_with_http_info(create_dashboard, **kwargs)  # noqa: E501
            return data

    def create_dashboard_with_http_info(self, create_dashboard, **kwargs):  # noqa: E501
        """create_dashboard  # noqa: E501

        Create a Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dashboard_with_http_info(create_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDashboard create_dashboard: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_dashboard' is set
        if self.api_client.client_side_validation and ('create_dashboard' not in params or
                                                       params['create_dashboard'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_dashboard` when calling `create_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_dashboard' in params:
            body_params = params['create_dashboard']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cost_report(self, cost_report_token, **kwargs):  # noqa: E501
        """delete_cost_report  # noqa: E501

        Delete a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cost_report(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cost_report_with_http_info(cost_report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cost_report_with_http_info(cost_report_token, **kwargs)  # noqa: E501
            return data

    def delete_cost_report_with_http_info(self, cost_report_token, **kwargs):  # noqa: E501
        """delete_cost_report  # noqa: E501

        Delete a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cost_report_with_http_info(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cost_report_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cost_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cost_report_token' is set
        if self.api_client.client_side_validation and ('cost_report_token' not in params or
                                                       params['cost_report_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cost_report_token` when calling `delete_cost_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cost_report_token' in params:
            path_params['cost_report_token'] = params['cost_report_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/cost_reports/{cost_report_token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dashboard(self, dashboard_token, **kwargs):  # noqa: E501
        """delete_dashboard  # noqa: E501

        Delete a Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboard(dashboard_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_token: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dashboard_with_http_info(dashboard_token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dashboard_with_http_info(dashboard_token, **kwargs)  # noqa: E501
            return data

    def delete_dashboard_with_http_info(self, dashboard_token, **kwargs):  # noqa: E501
        """delete_dashboard  # noqa: E501

        Delete a Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboard_with_http_info(dashboard_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_token: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_token' is set
        if self.api_client.client_side_validation and ('dashboard_token' not in params or
                                                       params['dashboard_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_token` when calling `delete_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_token' in params:
            path_params['dashboard_token'] = params['dashboard_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cost_report(self, cost_report_token, **kwargs):  # noqa: E501
        """get_cost_report  # noqa: E501

        Return a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cost_report(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cost_report_with_http_info(cost_report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cost_report_with_http_info(cost_report_token, **kwargs)  # noqa: E501
            return data

    def get_cost_report_with_http_info(self, cost_report_token, **kwargs):  # noqa: E501
        """get_cost_report  # noqa: E501

        Return a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cost_report_with_http_info(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cost_report_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cost_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cost_report_token' is set
        if self.api_client.client_side_validation and ('cost_report_token' not in params or
                                                       params['cost_report_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cost_report_token` when calling `get_cost_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cost_report_token' in params:
            path_params['cost_report_token'] = params['cost_report_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/cost_reports/{cost_report_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cost_reports(self, **kwargs):  # noqa: E501
        """get_cost_reports  # noqa: E501

        Return all CostReports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cost_reports(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :param str folder_token: The token for the Folder you would like to fetch Reports from.
        :return: CostReports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cost_reports_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cost_reports_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cost_reports_with_http_info(self, **kwargs):  # noqa: E501
        """get_cost_reports  # noqa: E501

        Return all CostReports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cost_reports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :param str folder_token: The token for the Folder you would like to fetch Reports from.
        :return: CostReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'folder_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cost_reports" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'folder_token' in params:
            query_params.append(('folder_token', params['folder_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/cost_reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostReports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_costs(self, cost_report_token, **kwargs):  # noqa: E501
        """get_costs  # noqa: E501

        Return all Costs for a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_costs(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: The CostReport token. (required)
        :param str start_date: First date you would like to filter costs from. ISO 8601 formatted.
        :param str end_date: Last date you would like to filter costs to. ISO 8601 formatted.
        :param list[str] groupings: Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
        :param str order: Whether to order costs by date in an ascending or descending manner.
        :param int limit: The amount of results to return. The maximum is 1000.
        :param str date_bin: The date bin of the costs. Defaults to the report's default or day.
        :param bool settings_include_credits: Results will include credits.
        :param bool settings_include_refunds: Results will include refunds.
        :param bool settings_include_discounts: Results will include discounts.
        :param bool settings_include_tax: Results will include tax.
        :param bool settings_amortize: Results will amortize.
        :param bool settings_unallocated: Results will show unallocated costs.
        :param str settings_aggregate_by: Results will aggregate by cost or usage.
        :return: Costs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_costs_with_http_info(cost_report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_costs_with_http_info(cost_report_token, **kwargs)  # noqa: E501
            return data

    def get_costs_with_http_info(self, cost_report_token, **kwargs):  # noqa: E501
        """get_costs  # noqa: E501

        Return all Costs for a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_costs_with_http_info(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: The CostReport token. (required)
        :param str start_date: First date you would like to filter costs from. ISO 8601 formatted.
        :param str end_date: Last date you would like to filter costs to. ISO 8601 formatted.
        :param list[str] groupings: Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
        :param str order: Whether to order costs by date in an ascending or descending manner.
        :param int limit: The amount of results to return. The maximum is 1000.
        :param str date_bin: The date bin of the costs. Defaults to the report's default or day.
        :param bool settings_include_credits: Results will include credits.
        :param bool settings_include_refunds: Results will include refunds.
        :param bool settings_include_discounts: Results will include discounts.
        :param bool settings_include_tax: Results will include tax.
        :param bool settings_amortize: Results will amortize.
        :param bool settings_unallocated: Results will show unallocated costs.
        :param str settings_aggregate_by: Results will aggregate by cost or usage.
        :return: Costs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cost_report_token', 'start_date', 'end_date', 'groupings', 'order', 'limit', 'date_bin', 'settings_include_credits', 'settings_include_refunds', 'settings_include_discounts', 'settings_include_tax', 'settings_amortize', 'settings_unallocated', 'settings_aggregate_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_costs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cost_report_token' is set
        if self.api_client.client_side_validation and ('cost_report_token' not in params or
                                                       params['cost_report_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cost_report_token` when calling `get_costs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cost_report_token' in params:
            query_params.append(('cost_report_token', params['cost_report_token']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'groupings' in params:
            query_params.append(('groupings', params['groupings']))  # noqa: E501
            collection_formats['groupings'] = 'csv'  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'date_bin' in params:
            query_params.append(('date_bin', params['date_bin']))  # noqa: E501
        if 'settings_include_credits' in params:
            query_params.append(('settings[include_credits]', params['settings_include_credits']))  # noqa: E501
        if 'settings_include_refunds' in params:
            query_params.append(('settings[include_refunds]', params['settings_include_refunds']))  # noqa: E501
        if 'settings_include_discounts' in params:
            query_params.append(('settings[include_discounts]', params['settings_include_discounts']))  # noqa: E501
        if 'settings_include_tax' in params:
            query_params.append(('settings[include_tax]', params['settings_include_tax']))  # noqa: E501
        if 'settings_amortize' in params:
            query_params.append(('settings[amortize]', params['settings_amortize']))  # noqa: E501
        if 'settings_unallocated' in params:
            query_params.append(('settings[unallocated]', params['settings_unallocated']))  # noqa: E501
        if 'settings_aggregate_by' in params:
            query_params.append(('settings[aggregate_by]', params['settings_aggregate_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/costs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Costs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dashboard(self, dashboard_token, **kwargs):  # noqa: E501
        """get_dashboard  # noqa: E501

        Return a specific Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard(dashboard_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_token: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dashboard_with_http_info(dashboard_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dashboard_with_http_info(dashboard_token, **kwargs)  # noqa: E501
            return data

    def get_dashboard_with_http_info(self, dashboard_token, **kwargs):  # noqa: E501
        """get_dashboard  # noqa: E501

        Return a specific Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_with_http_info(dashboard_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_token: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_token' is set
        if self.api_client.client_side_validation and ('dashboard_token' not in params or
                                                       params['dashboard_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_token` when calling `get_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_token' in params:
            path_params['dashboard_token'] = params['dashboard_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dashboards(self, **kwargs):  # noqa: E501
        """get_dashboards  # noqa: E501

        Return all Dashboards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: Dashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dashboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dashboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dashboards_with_http_info(self, **kwargs):  # noqa: E501
        """get_dashboards  # noqa: E501

        Return all Dashboards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: Dashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboards',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecasted_costs(self, cost_report_token, **kwargs):  # noqa: E501
        """get_forecasted_costs  # noqa: E501

        Return all ForecastedCosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecasted_costs(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :param datetime start_date: First date you would like to filter forecasted costs from. ISO 8601 formatted.
        :param datetime end_date: Last date you would like to filter forecasted costs from. ISO 8601 formatted.
        :param str provider: Limit the forecasted costs to a specific provider. 'all' is accepted to filter to overall forecast.
        :param str service: Limit the forecasted costs to a specific service. 'all' is accepted to filter to overall forecast. e.g. 'Amazon ElastiCache'.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: CostReports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecasted_costs_with_http_info(cost_report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecasted_costs_with_http_info(cost_report_token, **kwargs)  # noqa: E501
            return data

    def get_forecasted_costs_with_http_info(self, cost_report_token, **kwargs):  # noqa: E501
        """get_forecasted_costs  # noqa: E501

        Return all ForecastedCosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecasted_costs_with_http_info(cost_report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :param datetime start_date: First date you would like to filter forecasted costs from. ISO 8601 formatted.
        :param datetime end_date: Last date you would like to filter forecasted costs from. ISO 8601 formatted.
        :param str provider: Limit the forecasted costs to a specific provider. 'all' is accepted to filter to overall forecast.
        :param str service: Limit the forecasted costs to a specific service. 'all' is accepted to filter to overall forecast. e.g. 'Amazon ElastiCache'.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: CostReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cost_report_token', 'start_date', 'end_date', 'provider', 'service', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecasted_costs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cost_report_token' is set
        if self.api_client.client_side_validation and ('cost_report_token' not in params or
                                                       params['cost_report_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cost_report_token` when calling `get_forecasted_costs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cost_report_token' in params:
            path_params['cost_report_token'] = params['cost_report_token']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'provider' in params:
            query_params.append(('provider', params['provider']))  # noqa: E501
        if 'service' in params:
            query_params.append(('service', params['service']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/cost_reports/{cost_report_token}/forecasted_costs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostReports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cost_report(self, cost_report_token, update_cost_report, **kwargs):  # noqa: E501
        """update_cost_report  # noqa: E501

        Update a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cost_report(cost_report_token, update_cost_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :param UpdateCostReport update_cost_report: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cost_report_with_http_info(cost_report_token, update_cost_report, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cost_report_with_http_info(cost_report_token, update_cost_report, **kwargs)  # noqa: E501
            return data

    def update_cost_report_with_http_info(self, cost_report_token, update_cost_report, **kwargs):  # noqa: E501
        """update_cost_report  # noqa: E501

        Update a CostReport.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cost_report_with_http_info(cost_report_token, update_cost_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cost_report_token: (required)
        :param UpdateCostReport update_cost_report: (required)
        :return: CostReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cost_report_token', 'update_cost_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cost_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cost_report_token' is set
        if self.api_client.client_side_validation and ('cost_report_token' not in params or
                                                       params['cost_report_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cost_report_token` when calling `update_cost_report`")  # noqa: E501
        # verify the required parameter 'update_cost_report' is set
        if self.api_client.client_side_validation and ('update_cost_report' not in params or
                                                       params['update_cost_report'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_cost_report` when calling `update_cost_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cost_report_token' in params:
            path_params['cost_report_token'] = params['cost_report_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cost_report' in params:
            body_params = params['update_cost_report']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/cost_reports/{cost_report_token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dashboard(self, dashboard_token, update_dashboard, **kwargs):  # noqa: E501
        """update_dashboard  # noqa: E501

        Update a Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dashboard(dashboard_token, update_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_token: (required)
        :param UpdateDashboard update_dashboard: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dashboard_with_http_info(dashboard_token, update_dashboard, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dashboard_with_http_info(dashboard_token, update_dashboard, **kwargs)  # noqa: E501
            return data

    def update_dashboard_with_http_info(self, dashboard_token, update_dashboard, **kwargs):  # noqa: E501
        """update_dashboard  # noqa: E501

        Update a Dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dashboard_with_http_info(dashboard_token, update_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_token: (required)
        :param UpdateDashboard update_dashboard: (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_token', 'update_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_token' is set
        if self.api_client.client_side_validation and ('dashboard_token' not in params or
                                                       params['dashboard_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_token` when calling `update_dashboard`")  # noqa: E501
        # verify the required parameter 'update_dashboard' is set
        if self.api_client.client_side_validation and ('update_dashboard' not in params or
                                                       params['update_dashboard'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_dashboard` when calling `update_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_token' in params:
            path_params['dashboard_token'] = params['dashboard_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_dashboard' in params:
            body_params = params['update_dashboard']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
