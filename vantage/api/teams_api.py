# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vantage.api_client import ApiClient


class TeamsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_team(self, create_team, **kwargs):  # noqa: E501
        """create_team  # noqa: E501

        Create a new Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_team(create_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTeam create_team: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_team_with_http_info(create_team, **kwargs)  # noqa: E501
        else:
            (data) = self.create_team_with_http_info(create_team, **kwargs)  # noqa: E501
            return data

    def create_team_with_http_info(self, create_team, **kwargs):  # noqa: E501
        """create_team  # noqa: E501

        Create a new Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_team_with_http_info(create_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTeam create_team: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_team' is set
        if self.api_client.client_side_validation and ('create_team' not in params or
                                                       params['create_team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_team` when calling `create_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_team' in params:
            body_params = params['create_team']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_team(self, team_token, **kwargs):  # noqa: E501
        """delete_team  # noqa: E501

        Delete a Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_team(team_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_token: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_team_with_http_info(team_token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_team_with_http_info(team_token, **kwargs)  # noqa: E501
            return data

    def delete_team_with_http_info(self, team_token, **kwargs):  # noqa: E501
        """delete_team  # noqa: E501

        Delete a Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_team_with_http_info(team_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_token: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_token' is set
        if self.api_client.client_side_validation and ('team_token' not in params or
                                                       params['team_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team_token` when calling `delete_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_token' in params:
            path_params['team_token'] = params['team_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team(self, team_token, **kwargs):  # noqa: E501
        """get_team  # noqa: E501

        Return a specific Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team(team_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_token: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_with_http_info(team_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_with_http_info(team_token, **kwargs)  # noqa: E501
            return data

    def get_team_with_http_info(self, team_token, **kwargs):  # noqa: E501
        """get_team  # noqa: E501

        Return a specific Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_with_http_info(team_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_token: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_token' is set
        if self.api_client.client_side_validation and ('team_token' not in params or
                                                       params['team_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team_token` when calling `get_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_token' in params:
            path_params['team_token'] = params['team_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams(self, **kwargs):  # noqa: E501
        """get_teams  # noqa: E501

        Return all Teams that the current API token has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: Teams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_teams_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_teams_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_teams_with_http_info(self, **kwargs):  # noqa: E501
        """get_teams  # noqa: E501

        Return all Teams that the current API token has access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of results to return.
        :param int limit: The amount of results to return. The maximum is 1000.
        :return: Teams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Teams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_team(self, team_token, update_team, **kwargs):  # noqa: E501
        """update_team  # noqa: E501

        Update a Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_team(team_token, update_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_token: (required)
        :param UpdateTeam update_team: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_team_with_http_info(team_token, update_team, **kwargs)  # noqa: E501
        else:
            (data) = self.update_team_with_http_info(team_token, update_team, **kwargs)  # noqa: E501
            return data

    def update_team_with_http_info(self, team_token, update_team, **kwargs):  # noqa: E501
        """update_team  # noqa: E501

        Update a Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_team_with_http_info(team_token, update_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_token: (required)
        :param UpdateTeam update_team: (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_token', 'update_team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_token' is set
        if self.api_client.client_side_validation and ('team_token' not in params or
                                                       params['team_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team_token` when calling `update_team`")  # noqa: E501
        # verify the required parameter 'update_team' is set
        if self.api_client.client_side_validation and ('update_team' not in params or
                                                       params['update_team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_team` when calling `update_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_token' in params:
            path_params['team_token'] = params['team_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_team' in params:
            body_params = params['update_team']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
