# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vantage.api_client import ApiClient


class IntegrationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_azure_integration(self, create_azure_integration, **kwargs):  # noqa: E501
        """create_azure_integration  # noqa: E501

        Create an Azure Integration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_azure_integration(create_azure_integration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAzureIntegration create_azure_integration: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_azure_integration_with_http_info(create_azure_integration, **kwargs)  # noqa: E501
        else:
            (data) = self.create_azure_integration_with_http_info(create_azure_integration, **kwargs)  # noqa: E501
            return data

    def create_azure_integration_with_http_info(self, create_azure_integration, **kwargs):  # noqa: E501
        """create_azure_integration  # noqa: E501

        Create an Azure Integration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_azure_integration_with_http_info(create_azure_integration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAzureIntegration create_azure_integration: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_azure_integration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_azure_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_azure_integration' is set
        if self.api_client.client_side_validation and ('create_azure_integration' not in params or
                                                       params['create_azure_integration'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_azure_integration` when calling `create_azure_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_azure_integration' in params:
            body_params = params['create_azure_integration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/azure', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_custom_provider_integration(self, create_custom_provider_integration, **kwargs):  # noqa: E501
        """create_custom_provider_integration  # noqa: E501

        Create a Custom Provider Integration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_provider_integration(create_custom_provider_integration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomProviderIntegration create_custom_provider_integration: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_custom_provider_integration_with_http_info(create_custom_provider_integration, **kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_provider_integration_with_http_info(create_custom_provider_integration, **kwargs)  # noqa: E501
            return data

    def create_custom_provider_integration_with_http_info(self, create_custom_provider_integration, **kwargs):  # noqa: E501
        """create_custom_provider_integration  # noqa: E501

        Create a Custom Provider Integration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_provider_integration_with_http_info(create_custom_provider_integration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomProviderIntegration create_custom_provider_integration: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_custom_provider_integration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_provider_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_custom_provider_integration' is set
        if self.api_client.client_side_validation and ('create_custom_provider_integration' not in params or
                                                       params['create_custom_provider_integration'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_custom_provider_integration` when calling `create_custom_provider_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_custom_provider_integration' in params:
            body_params = params['create_custom_provider_integration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/custom_provider', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_gcp_integration(self, create_gcp_integration, **kwargs):  # noqa: E501
        """create_gcp_integration  # noqa: E501

        Create a GCP Integration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gcp_integration(create_gcp_integration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGCPIntegration create_gcp_integration: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_gcp_integration_with_http_info(create_gcp_integration, **kwargs)  # noqa: E501
        else:
            (data) = self.create_gcp_integration_with_http_info(create_gcp_integration, **kwargs)  # noqa: E501
            return data

    def create_gcp_integration_with_http_info(self, create_gcp_integration, **kwargs):  # noqa: E501
        """create_gcp_integration  # noqa: E501

        Create a GCP Integration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gcp_integration_with_http_info(create_gcp_integration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGCPIntegration create_gcp_integration: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_gcp_integration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gcp_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_gcp_integration' is set
        if self.api_client.client_side_validation and ('create_gcp_integration' not in params or
                                                       params['create_gcp_integration'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_gcp_integration` when calling `create_gcp_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_gcp_integration' in params:
            body_params = params['create_gcp_integration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/gcp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_costs_upload_via_csv(self, csv, integration_token, **kwargs):  # noqa: E501
        """create_user_costs_upload_via_csv  # noqa: E501

        Create UserCostsUpload via CSV for a Custom Provider Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_costs_upload_via_csv(csv, integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file csv: CSV file containing custom costs (required)
        :param str integration_token: (required)
        :return: UserCostsUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_costs_upload_via_csv_with_http_info(csv, integration_token, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_costs_upload_via_csv_with_http_info(csv, integration_token, **kwargs)  # noqa: E501
            return data

    def create_user_costs_upload_via_csv_with_http_info(self, csv, integration_token, **kwargs):  # noqa: E501
        """create_user_costs_upload_via_csv  # noqa: E501

        Create UserCostsUpload via CSV for a Custom Provider Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_costs_upload_via_csv_with_http_info(csv, integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file csv: CSV file containing custom costs (required)
        :param str integration_token: (required)
        :return: UserCostsUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['csv', 'integration_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_costs_upload_via_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'csv' is set
        if self.api_client.client_side_validation and ('csv' not in params or
                                                       params['csv'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `csv` when calling `create_user_costs_upload_via_csv`")  # noqa: E501
        # verify the required parameter 'integration_token' is set
        if self.api_client.client_side_validation and ('integration_token' not in params or
                                                       params['integration_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `integration_token` when calling `create_user_costs_upload_via_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_token' in params:
            path_params['integration_token'] = params['integration_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'csv' in params:
            local_var_files['csv'] = params['csv']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_token}/costs.csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserCostsUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_integration(self, integration_token, **kwargs):  # noqa: E501
        """delete_integration  # noqa: E501

        Delete an Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_integration(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_integration_with_http_info(integration_token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_integration_with_http_info(integration_token, **kwargs)  # noqa: E501
            return data

    def delete_integration_with_http_info(self, integration_token, **kwargs):  # noqa: E501
        """delete_integration  # noqa: E501

        Delete an Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_integration_with_http_info(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_token' is set
        if self.api_client.client_side_validation and ('integration_token' not in params or
                                                       params['integration_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `integration_token` when calling `delete_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_token' in params:
            path_params['integration_token'] = params['integration_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_costs_upload(self, integration_token, user_costs_upload_token, **kwargs):  # noqa: E501
        """delete_user_costs_upload  # noqa: E501

        Delete a UserCostsUpload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_costs_upload(integration_token, user_costs_upload_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :param int user_costs_upload_token: (required)
        :return: Cost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_costs_upload_with_http_info(integration_token, user_costs_upload_token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_costs_upload_with_http_info(integration_token, user_costs_upload_token, **kwargs)  # noqa: E501
            return data

    def delete_user_costs_upload_with_http_info(self, integration_token, user_costs_upload_token, **kwargs):  # noqa: E501
        """delete_user_costs_upload  # noqa: E501

        Delete a UserCostsUpload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_costs_upload_with_http_info(integration_token, user_costs_upload_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :param int user_costs_upload_token: (required)
        :return: Cost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_token', 'user_costs_upload_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_costs_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_token' is set
        if self.api_client.client_side_validation and ('integration_token' not in params or
                                                       params['integration_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `integration_token` when calling `delete_user_costs_upload`")  # noqa: E501
        # verify the required parameter 'user_costs_upload_token' is set
        if self.api_client.client_side_validation and ('user_costs_upload_token' not in params or
                                                       params['user_costs_upload_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_costs_upload_token` when calling `delete_user_costs_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_token' in params:
            path_params['integration_token'] = params['integration_token']  # noqa: E501
        if 'user_costs_upload_token' in params:
            path_params['user_costs_upload_token'] = params['user_costs_upload_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_token}/costs/{user_costs_upload_token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integration(self, integration_token, **kwargs):  # noqa: E501
        """get_integration  # noqa: E501

        Return an Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_integration_with_http_info(integration_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_integration_with_http_info(integration_token, **kwargs)  # noqa: E501
            return data

    def get_integration_with_http_info(self, integration_token, **kwargs):  # noqa: E501
        """get_integration  # noqa: E501

        Return an Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration_with_http_info(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_token' is set
        if self.api_client.client_side_validation and ('integration_token' not in params or
                                                       params['integration_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `integration_token` when calling `get_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_token' in params:
            path_params['integration_token'] = params['integration_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integrations(self, **kwargs):  # noqa: E501
        """get_integrations  # noqa: E501

        Return all Integrations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integrations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: Query by provider name to list all Integrations for a specific provider.
        :param str account_identifier: Query by account identifier to list all Integrations that match a specific account. For Azure, this is the subscription ID. Must include provider when using this parameter.
        :param int page: The page of results to return.
        :param int limit: The number of results to return. The maximum is 1000.
        :return: Integrations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_integrations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_integrations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_integrations_with_http_info(self, **kwargs):  # noqa: E501
        """get_integrations  # noqa: E501

        Return all Integrations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integrations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: Query by provider name to list all Integrations for a specific provider.
        :param str account_identifier: Query by account identifier to list all Integrations that match a specific account. For Azure, this is the subscription ID. Must include provider when using this parameter.
        :param int page: The page of results to return.
        :param int limit: The number of results to return. The maximum is 1000.
        :return: Integrations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider', 'account_identifier', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integrations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider' in params:
            query_params.append(('provider', params['provider']))  # noqa: E501
        if 'account_identifier' in params:
            query_params.append(('account_identifier', params['account_identifier']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integrations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_costs_uploads(self, integration_token, **kwargs):  # noqa: E501
        """get_user_costs_uploads  # noqa: E501

        List UserCostUploads.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_costs_uploads(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :return: UserCostsUploads
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_costs_uploads_with_http_info(integration_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_costs_uploads_with_http_info(integration_token, **kwargs)  # noqa: E501
            return data

    def get_user_costs_uploads_with_http_info(self, integration_token, **kwargs):  # noqa: E501
        """get_user_costs_uploads  # noqa: E501

        List UserCostUploads.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_costs_uploads_with_http_info(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :return: UserCostsUploads
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_costs_uploads" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_token' is set
        if self.api_client.client_side_validation and ('integration_token' not in params or
                                                       params['integration_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `integration_token` when calling `get_user_costs_uploads`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_token' in params:
            path_params['integration_token'] = params['integration_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_token}/costs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserCostsUploads',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_integration(self, integration_token, **kwargs):  # noqa: E501
        """update_integration  # noqa: E501

        Update an Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :param list[str] workspace_tokens: The Workspace tokens to associate to the Integration.
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_integration_with_http_info(integration_token, **kwargs)  # noqa: E501
        else:
            (data) = self.update_integration_with_http_info(integration_token, **kwargs)  # noqa: E501
            return data

    def update_integration_with_http_info(self, integration_token, **kwargs):  # noqa: E501
        """update_integration  # noqa: E501

        Update an Integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration_with_http_info(integration_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_token: (required)
        :param list[str] workspace_tokens: The Workspace tokens to associate to the Integration.
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_token', 'workspace_tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_token' is set
        if self.api_client.client_side_validation and ('integration_token' not in params or
                                                       params['integration_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `integration_token` when calling `update_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_token' in params:
            path_params['integration_token'] = params['integration_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_tokens' in params:
            body_params = params['workspace_tokens']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
