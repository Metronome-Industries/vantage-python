# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vantage.api_client import ApiClient


class RecommendationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_recommendation(self, recommendation_token, **kwargs):  # noqa: E501
        """get_recommendation  # noqa: E501

        Return a Recommendation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendation(recommendation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recommendation_token: (required)
        :return: Recommendation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommendation_with_http_info(recommendation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommendation_with_http_info(recommendation_token, **kwargs)  # noqa: E501
            return data

    def get_recommendation_with_http_info(self, recommendation_token, **kwargs):  # noqa: E501
        """get_recommendation  # noqa: E501

        Return a Recommendation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendation_with_http_info(recommendation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recommendation_token: (required)
        :return: Recommendation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recommendation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recommendation_token' is set
        if self.api_client.client_side_validation and ('recommendation_token' not in params or
                                                       params['recommendation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recommendation_token` when calling `get_recommendation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recommendation_token' in params:
            path_params['recommendation_token'] = params['recommendation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/recommendations/{recommendation_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recommendation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommendation_resource(self, recommendation_token, resource_token, **kwargs):  # noqa: E501
        """get_recommendation_resource  # noqa: E501

        Return an Active Resource, including Recommendation Actions, referenced in this Recommendation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendation_resource(recommendation_token, resource_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recommendation_token: (required)
        :param str resource_token: (required)
        :return: ProviderResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommendation_resource_with_http_info(recommendation_token, resource_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommendation_resource_with_http_info(recommendation_token, resource_token, **kwargs)  # noqa: E501
            return data

    def get_recommendation_resource_with_http_info(self, recommendation_token, resource_token, **kwargs):  # noqa: E501
        """get_recommendation_resource  # noqa: E501

        Return an Active Resource, including Recommendation Actions, referenced in this Recommendation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendation_resource_with_http_info(recommendation_token, resource_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recommendation_token: (required)
        :param str resource_token: (required)
        :return: ProviderResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recommendation_token', 'resource_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendation_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recommendation_token' is set
        if self.api_client.client_side_validation and ('recommendation_token' not in params or
                                                       params['recommendation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recommendation_token` when calling `get_recommendation_resource`")  # noqa: E501
        # verify the required parameter 'resource_token' is set
        if self.api_client.client_side_validation and ('resource_token' not in params or
                                                       params['resource_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_token` when calling `get_recommendation_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recommendation_token' in params:
            path_params['recommendation_token'] = params['recommendation_token']  # noqa: E501
        if 'resource_token' in params:
            path_params['resource_token'] = params['resource_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/recommendations/{recommendation_token}/resources/{resource_token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommendation_resources(self, recommendation_token, **kwargs):  # noqa: E501
        """get_recommendation_resources  # noqa: E501

        Return all Active Resources, including Recommendation Actions, referenced in this Recommendation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendation_resources(recommendation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recommendation_token: (required)
        :param int page: The page of results to return.
        :param int limit: The number of results to return. The maximum is 1000.
        :return: ProviderResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommendation_resources_with_http_info(recommendation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommendation_resources_with_http_info(recommendation_token, **kwargs)  # noqa: E501
            return data

    def get_recommendation_resources_with_http_info(self, recommendation_token, **kwargs):  # noqa: E501
        """get_recommendation_resources  # noqa: E501

        Return all Active Resources, including Recommendation Actions, referenced in this Recommendation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendation_resources_with_http_info(recommendation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recommendation_token: (required)
        :param int page: The page of results to return.
        :param int limit: The number of results to return. The maximum is 1000.
        :return: ProviderResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recommendation_token', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendation_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recommendation_token' is set
        if self.api_client.client_side_validation and ('recommendation_token' not in params or
                                                       params['recommendation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recommendation_token` when calling `get_recommendation_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recommendation_token' in params:
            path_params['recommendation_token'] = params['recommendation_token']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/recommendations/{recommendation_token}/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommendations(self, **kwargs):  # noqa: E501
        """get_recommendations  # noqa: E501

        Return all Recommendations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_token: Filter by workspace.
        :param str provider_account_id: Filter by provider account id (AWS account, Azure subscription id, etc).
        :param str category: Filter by category.
        :param str provider: Filter by provider.
        :param int page: The page of results to return.
        :param int limit: The number of results to return. The maximum is 1000.
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommendations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_recommendations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_recommendations_with_http_info(self, **kwargs):  # noqa: E501
        """get_recommendations  # noqa: E501

        Return all Recommendations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_token: Filter by workspace.
        :param str provider_account_id: Filter by provider account id (AWS account, Azure subscription id, etc).
        :param str category: Filter by category.
        :param str provider: Filter by provider.
        :param int page: The page of results to return.
        :param int limit: The number of results to return. The maximum is 1000.
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_token', 'provider_account_id', 'category', 'provider', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'workspace_token' in params:
            query_params.append(('workspace_token', params['workspace_token']))  # noqa: E501
        if 'provider_account_id' in params:
            query_params.append(('provider_account_id', params['provider_account_id']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'provider' in params:
            query_params.append(('provider', params['provider']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recommendations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
