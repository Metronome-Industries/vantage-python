# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class RecommendationAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'description': 'str',
        'potential_savings': 'str',
        'instance_type': 'str',
        'containers': 'str'
    }

    attribute_map = {
        'action': 'action',
        'description': 'description',
        'potential_savings': 'potential_savings',
        'instance_type': 'instance_type',
        'containers': 'containers'
    }

    def __init__(self, action=None, description=None, potential_savings=None, instance_type=None, containers=None, _configuration=None):  # noqa: E501
        """RecommendationAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action = None
        self._description = None
        self._potential_savings = None
        self._instance_type = None
        self._containers = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if description is not None:
            self.description = description
        if potential_savings is not None:
            self.potential_savings = potential_savings
        if instance_type is not None:
            self.instance_type = instance_type
        if containers is not None:
            self.containers = containers

    @property
    def action(self):
        """Gets the action of this RecommendationAction.  # noqa: E501


        :return: The action of this RecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RecommendationAction.


        :param action: The action of this RecommendationAction.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def description(self):
        """Gets the description of this RecommendationAction.  # noqa: E501


        :return: The description of this RecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecommendationAction.


        :param description: The description of this RecommendationAction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def potential_savings(self):
        """Gets the potential_savings of this RecommendationAction.  # noqa: E501

        Potential savings in dollars  # noqa: E501

        :return: The potential_savings of this RecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._potential_savings

    @potential_savings.setter
    def potential_savings(self, potential_savings):
        """Sets the potential_savings of this RecommendationAction.

        Potential savings in dollars  # noqa: E501

        :param potential_savings: The potential_savings of this RecommendationAction.  # noqa: E501
        :type: str
        """

        self._potential_savings = potential_savings

    @property
    def instance_type(self):
        """Gets the instance_type of this RecommendationAction.  # noqa: E501


        :return: The instance_type of this RecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this RecommendationAction.


        :param instance_type: The instance_type of this RecommendationAction.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def containers(self):
        """Gets the containers of this RecommendationAction.  # noqa: E501


        :return: The containers of this RecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this RecommendationAction.


        :param containers: The containers of this RecommendationAction.  # noqa: E501
        :type: str
        """

        self._containers = containers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecommendationAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecommendationAction):
            return True

        return self.to_dict() != other.to_dict()
