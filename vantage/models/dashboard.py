# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Dashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'title': 'str',
        'widgets': 'list[DashboardWidget]',
        'saved_filter_tokens': 'list[str]',
        'date_bin': 'str',
        'date_interval': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'workspace_token': 'str'
    }

    attribute_map = {
        'token': 'token',
        'title': 'title',
        'widgets': 'widgets',
        'saved_filter_tokens': 'saved_filter_tokens',
        'date_bin': 'date_bin',
        'date_interval': 'date_interval',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'workspace_token': 'workspace_token'
    }

    def __init__(self, token=None, title=None, widgets=None, saved_filter_tokens=None, date_bin=None, date_interval=None, start_date=None, end_date=None, created_at=None, updated_at=None, workspace_token=None, _configuration=None):  # noqa: E501
        """Dashboard - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._title = None
        self._widgets = None
        self._saved_filter_tokens = None
        self._date_bin = None
        self._date_interval = None
        self._start_date = None
        self._end_date = None
        self._created_at = None
        self._updated_at = None
        self._workspace_token = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if title is not None:
            self.title = title
        if widgets is not None:
            self.widgets = widgets
        if saved_filter_tokens is not None:
            self.saved_filter_tokens = saved_filter_tokens
        if date_bin is not None:
            self.date_bin = date_bin
        if date_interval is not None:
            self.date_interval = date_interval
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if workspace_token is not None:
            self.workspace_token = workspace_token

    @property
    def token(self):
        """Gets the token of this Dashboard.  # noqa: E501


        :return: The token of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Dashboard.


        :param token: The token of this Dashboard.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def title(self):
        """Gets the title of this Dashboard.  # noqa: E501

        The title of the Dashboard.  # noqa: E501

        :return: The title of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Dashboard.

        The title of the Dashboard.  # noqa: E501

        :param title: The title of this Dashboard.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def widgets(self):
        """Gets the widgets of this Dashboard.  # noqa: E501


        :return: The widgets of this Dashboard.  # noqa: E501
        :rtype: list[DashboardWidget]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Dashboard.


        :param widgets: The widgets of this Dashboard.  # noqa: E501
        :type: list[DashboardWidget]
        """

        self._widgets = widgets

    @property
    def saved_filter_tokens(self):
        """Gets the saved_filter_tokens of this Dashboard.  # noqa: E501

        The tokens of the Saved Filters used in the Dashboard.  # noqa: E501

        :return: The saved_filter_tokens of this Dashboard.  # noqa: E501
        :rtype: list[str]
        """
        return self._saved_filter_tokens

    @saved_filter_tokens.setter
    def saved_filter_tokens(self, saved_filter_tokens):
        """Sets the saved_filter_tokens of this Dashboard.

        The tokens of the Saved Filters used in the Dashboard.  # noqa: E501

        :param saved_filter_tokens: The saved_filter_tokens of this Dashboard.  # noqa: E501
        :type: list[str]
        """

        self._saved_filter_tokens = saved_filter_tokens

    @property
    def date_bin(self):
        """Gets the date_bin of this Dashboard.  # noqa: E501

        Determines how to group costs in the Dashboard.  # noqa: E501

        :return: The date_bin of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._date_bin

    @date_bin.setter
    def date_bin(self, date_bin):
        """Sets the date_bin of this Dashboard.

        Determines how to group costs in the Dashboard.  # noqa: E501

        :param date_bin: The date_bin of this Dashboard.  # noqa: E501
        :type: str
        """
        allowed_values = ["cumulative", "day", "week", "month"]  # noqa: E501
        if (self._configuration.client_side_validation and
                date_bin not in allowed_values):
            raise ValueError(
                "Invalid value for `date_bin` ({0}), must be one of {1}"  # noqa: E501
                .format(date_bin, allowed_values)
            )

        self._date_bin = date_bin

    @property
    def date_interval(self):
        """Gets the date_interval of this Dashboard.  # noqa: E501

        Determines the date range for Reports in the Dashboard. Guaranteed to be set to 'custom' if 'start_date' and 'end_date' are set.  # noqa: E501

        :return: The date_interval of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._date_interval

    @date_interval.setter
    def date_interval(self, date_interval):
        """Sets the date_interval of this Dashboard.

        Determines the date range for Reports in the Dashboard. Guaranteed to be set to 'custom' if 'start_date' and 'end_date' are set.  # noqa: E501

        :param date_interval: The date_interval of this Dashboard.  # noqa: E501
        :type: str
        """
        allowed_values = ["this_month", "last_7_days", "last_30_days", "last_month", "last_3_months", "last_6_months", "custom", "last_12_months", "last_24_months", "last_36_months", "next_month", "next_3_months", "next_6_months", "next_12_months", "year_to_date", "last_3_days"]  # noqa: E501
        if (self._configuration.client_side_validation and
                date_interval not in allowed_values):
            raise ValueError(
                "Invalid value for `date_interval` ({0}), must be one of {1}"  # noqa: E501
                .format(date_interval, allowed_values)
            )

        self._date_interval = date_interval

    @property
    def start_date(self):
        """Gets the start_date of this Dashboard.  # noqa: E501

        The start date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :return: The start_date of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Dashboard.

        The start date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :param start_date: The start_date of this Dashboard.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Dashboard.  # noqa: E501

        The end date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :return: The end_date of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Dashboard.

        The end date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :param end_date: The end_date of this Dashboard.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def created_at(self):
        """Gets the created_at of this Dashboard.  # noqa: E501

        The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dashboard.

        The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this Dashboard.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Dashboard.  # noqa: E501

        The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.  # noqa: E501

        :return: The updated_at of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Dashboard.

        The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.  # noqa: E501

        :param updated_at: The updated_at of this Dashboard.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def workspace_token(self):
        """Gets the workspace_token of this Dashboard.  # noqa: E501

        The token for the Workspace the Dashboard is a part of.  # noqa: E501

        :return: The workspace_token of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this Dashboard.

        The token for the Workspace the Dashboard is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this Dashboard.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dashboard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dashboard):
            return True

        return self.to_dict() != other.to_dict()
