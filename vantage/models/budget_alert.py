# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class BudgetAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'budget_tokens': 'list[str]',
        'created_at': 'str',
        'workspace_token': 'str',
        'user_token': 'str',
        'user_tokens': 'list[str]',
        'duration_in_days': 'str',
        'threshold': 'str',
        'period_to_track': 'str',
        'integration_provider': 'str',
        'recipient_channels': 'str'
    }

    attribute_map = {
        'token': 'token',
        'budget_tokens': 'budget_tokens',
        'created_at': 'created_at',
        'workspace_token': 'workspace_token',
        'user_token': 'user_token',
        'user_tokens': 'user_tokens',
        'duration_in_days': 'duration_in_days',
        'threshold': 'threshold',
        'period_to_track': 'period_to_track',
        'integration_provider': 'integration_provider',
        'recipient_channels': 'recipient_channels'
    }

    def __init__(self, token=None, budget_tokens=None, created_at=None, workspace_token=None, user_token=None, user_tokens=None, duration_in_days=None, threshold=None, period_to_track=None, integration_provider=None, recipient_channels=None, _configuration=None):  # noqa: E501
        """BudgetAlert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._budget_tokens = None
        self._created_at = None
        self._workspace_token = None
        self._user_token = None
        self._user_tokens = None
        self._duration_in_days = None
        self._threshold = None
        self._period_to_track = None
        self._integration_provider = None
        self._recipient_channels = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if budget_tokens is not None:
            self.budget_tokens = budget_tokens
        if created_at is not None:
            self.created_at = created_at
        if workspace_token is not None:
            self.workspace_token = workspace_token
        if user_token is not None:
            self.user_token = user_token
        if user_tokens is not None:
            self.user_tokens = user_tokens
        if duration_in_days is not None:
            self.duration_in_days = duration_in_days
        if threshold is not None:
            self.threshold = threshold
        if period_to_track is not None:
            self.period_to_track = period_to_track
        if integration_provider is not None:
            self.integration_provider = integration_provider
        if recipient_channels is not None:
            self.recipient_channels = recipient_channels

    @property
    def token(self):
        """Gets the token of this BudgetAlert.  # noqa: E501


        :return: The token of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BudgetAlert.


        :param token: The token of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def budget_tokens(self):
        """Gets the budget_tokens of this BudgetAlert.  # noqa: E501

        The tokens for the Budgets that the Budget Alert is monitoring to trigger alerts on.  # noqa: E501

        :return: The budget_tokens of this BudgetAlert.  # noqa: E501
        :rtype: list[str]
        """
        return self._budget_tokens

    @budget_tokens.setter
    def budget_tokens(self, budget_tokens):
        """Sets the budget_tokens of this BudgetAlert.

        The tokens for the Budgets that the Budget Alert is monitoring to trigger alerts on.  # noqa: E501

        :param budget_tokens: The budget_tokens of this BudgetAlert.  # noqa: E501
        :type: list[str]
        """

        self._budget_tokens = budget_tokens

    @property
    def created_at(self):
        """Gets the created_at of this BudgetAlert.  # noqa: E501

        The date and time, in UTC, the Budget Alert was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BudgetAlert.

        The date and time, in UTC, the Budget Alert was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def workspace_token(self):
        """Gets the workspace_token of this BudgetAlert.  # noqa: E501

        The token for the Workspace the ResourceReport is a part of.  # noqa: E501

        :return: The workspace_token of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this BudgetAlert.

        The token for the Workspace the ResourceReport is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    @property
    def user_token(self):
        """Gets the user_token of this BudgetAlert.  # noqa: E501

        The token for the User who created this BudgetAlert.  # noqa: E501

        :return: The user_token of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._user_token

    @user_token.setter
    def user_token(self, user_token):
        """Sets the user_token of this BudgetAlert.

        The token for the User who created this BudgetAlert.  # noqa: E501

        :param user_token: The user_token of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._user_token = user_token

    @property
    def user_tokens(self):
        """Gets the user_tokens of this BudgetAlert.  # noqa: E501

        The Users that receive the alert.  # noqa: E501

        :return: The user_tokens of this BudgetAlert.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_tokens

    @user_tokens.setter
    def user_tokens(self, user_tokens):
        """Sets the user_tokens of this BudgetAlert.

        The Users that receive the alert.  # noqa: E501

        :param user_tokens: The user_tokens of this BudgetAlert.  # noqa: E501
        :type: list[str]
        """

        self._user_tokens = user_tokens

    @property
    def duration_in_days(self):
        """Gets the duration_in_days of this BudgetAlert.  # noqa: E501

        The number of days from the start or end of the month to trigger the alert if the threshold is reached.  # noqa: E501

        :return: The duration_in_days of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._duration_in_days

    @duration_in_days.setter
    def duration_in_days(self, duration_in_days):
        """Sets the duration_in_days of this BudgetAlert.

        The number of days from the start or end of the month to trigger the alert if the threshold is reached.  # noqa: E501

        :param duration_in_days: The duration_in_days of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._duration_in_days = duration_in_days

    @property
    def threshold(self):
        """Gets the threshold of this BudgetAlert.  # noqa: E501

        Alerts only send if they reach this number (as a percentage). When threshold is 100, that means alerts are triggered once costs reach 100% of the budget.  # noqa: E501

        :return: The threshold of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this BudgetAlert.

        Alerts only send if they reach this number (as a percentage). When threshold is 100, that means alerts are triggered once costs reach 100% of the budget.  # noqa: E501

        :param threshold: The threshold of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._threshold = threshold

    @property
    def period_to_track(self):
        """Gets the period_to_track of this BudgetAlert.  # noqa: E501

        The period tracked on the alert. Used with duration_in_days to determine the time window of the alert. Possible values: start_of_the_month, end_of_the_month.  # noqa: E501

        :return: The period_to_track of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._period_to_track

    @period_to_track.setter
    def period_to_track(self, period_to_track):
        """Sets the period_to_track of this BudgetAlert.

        The period tracked on the alert. Used with duration_in_days to determine the time window of the alert. Possible values: start_of_the_month, end_of_the_month.  # noqa: E501

        :param period_to_track: The period_to_track of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._period_to_track = period_to_track

    @property
    def integration_provider(self):
        """Gets the integration_provider of this BudgetAlert.  # noqa: E501

        The provider used for sending alerts. This must be configured in the console. Possible values are: slack, microsoft_graph.  # noqa: E501

        :return: The integration_provider of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._integration_provider

    @integration_provider.setter
    def integration_provider(self, integration_provider):
        """Sets the integration_provider of this BudgetAlert.

        The provider used for sending alerts. This must be configured in the console. Possible values are: slack, microsoft_graph.  # noqa: E501

        :param integration_provider: The integration_provider of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._integration_provider = integration_provider

    @property
    def recipient_channels(self):
        """Gets the recipient_channels of this BudgetAlert.  # noqa: E501

        The channels receiving the alerts. Requires an integration provider to be connected.  # noqa: E501

        :return: The recipient_channels of this BudgetAlert.  # noqa: E501
        :rtype: str
        """
        return self._recipient_channels

    @recipient_channels.setter
    def recipient_channels(self, recipient_channels):
        """Sets the recipient_channels of this BudgetAlert.

        The channels receiving the alerts. Requires an integration provider to be connected.  # noqa: E501

        :param recipient_channels: The recipient_channels of this BudgetAlert.  # noqa: E501
        :type: str
        """

        self._recipient_channels = recipient_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetAlert):
            return True

        return self.to_dict() != other.to_dict()
