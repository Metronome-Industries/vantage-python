# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class UserCostsUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'filename': 'str',
        'amount': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'import_status': 'str',
        'created_by_token': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'token': 'token',
        'filename': 'filename',
        'amount': 'amount',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'import_status': 'import_status',
        'created_by_token': 'created_by_token',
        'created_at': 'created_at'
    }

    def __init__(self, token=None, filename=None, amount=None, start_date=None, end_date=None, import_status=None, created_by_token=None, created_at=None, _configuration=None):  # noqa: E501
        """UserCostsUpload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._filename = None
        self._amount = None
        self._start_date = None
        self._end_date = None
        self._import_status = None
        self._created_by_token = None
        self._created_at = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if filename is not None:
            self.filename = filename
        if amount is not None:
            self.amount = amount
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if import_status is not None:
            self.import_status = import_status
        if created_by_token is not None:
            self.created_by_token = created_by_token
        if created_at is not None:
            self.created_at = created_at

    @property
    def token(self):
        """Gets the token of this UserCostsUpload.  # noqa: E501

        The token of the UserCostsUpload.  # noqa: E501

        :return: The token of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserCostsUpload.

        The token of the UserCostsUpload.  # noqa: E501

        :param token: The token of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def filename(self):
        """Gets the filename of this UserCostsUpload.  # noqa: E501

        The filename of the uploaded costs UserCostsUpload.  # noqa: E501

        :return: The filename of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this UserCostsUpload.

        The filename of the uploaded costs UserCostsUpload.  # noqa: E501

        :param filename: The filename of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def amount(self):
        """Gets the amount of this UserCostsUpload.  # noqa: E501

        The total amount of the costs in the UserCostsUpload.  # noqa: E501

        :return: The amount of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this UserCostsUpload.

        The total amount of the costs in the UserCostsUpload.  # noqa: E501

        :param amount: The amount of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def start_date(self):
        """Gets the start_date of this UserCostsUpload.  # noqa: E501

        The start date of the costs in the UserCostsUpload.  # noqa: E501

        :return: The start_date of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UserCostsUpload.

        The start date of the costs in the UserCostsUpload.  # noqa: E501

        :param start_date: The start_date of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this UserCostsUpload.  # noqa: E501

        The end date of the costs in the UserCostsUpload.  # noqa: E501

        :return: The end_date of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UserCostsUpload.

        The end date of the costs in the UserCostsUpload.  # noqa: E501

        :param end_date: The end_date of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def import_status(self):
        """Gets the import_status of this UserCostsUpload.  # noqa: E501

        Import status of the UserCostsUpload.  # noqa: E501

        :return: The import_status of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._import_status

    @import_status.setter
    def import_status(self, import_status):
        """Sets the import_status of this UserCostsUpload.

        Import status of the UserCostsUpload.  # noqa: E501

        :param import_status: The import_status of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._import_status = import_status

    @property
    def created_by_token(self):
        """Gets the created_by_token of this UserCostsUpload.  # noqa: E501

        The token of the Creator of the UserCostsUpload.  # noqa: E501

        :return: The created_by_token of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._created_by_token

    @created_by_token.setter
    def created_by_token(self, created_by_token):
        """Sets the created_by_token of this UserCostsUpload.

        The token of the Creator of the UserCostsUpload.  # noqa: E501

        :param created_by_token: The created_by_token of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._created_by_token = created_by_token

    @property
    def created_at(self):
        """Gets the created_at of this UserCostsUpload.  # noqa: E501

        When the UserCostsUpload was uploaded.  # noqa: E501

        :return: The created_at of this UserCostsUpload.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserCostsUpload.

        When the UserCostsUpload was uploaded.  # noqa: E501

        :param created_at: The created_at of this UserCostsUpload.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCostsUpload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCostsUpload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCostsUpload):
            return True

        return self.to_dict() != other.to_dict()
