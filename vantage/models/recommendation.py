# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Recommendation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'category': 'str',
        'workspace_token': 'str',
        'provider': 'str',
        'provider_account_id': 'str',
        'description': 'str',
        'potential_savings': 'str',
        'service': 'str',
        'created_at': 'str',
        'resources_affected_count': 'str'
    }

    attribute_map = {
        'token': 'token',
        'category': 'category',
        'workspace_token': 'workspace_token',
        'provider': 'provider',
        'provider_account_id': 'provider_account_id',
        'description': 'description',
        'potential_savings': 'potential_savings',
        'service': 'service',
        'created_at': 'created_at',
        'resources_affected_count': 'resources_affected_count'
    }

    def __init__(self, token=None, category=None, workspace_token=None, provider=None, provider_account_id=None, description=None, potential_savings=None, service=None, created_at=None, resources_affected_count=None, _configuration=None):  # noqa: E501
        """Recommendation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._category = None
        self._workspace_token = None
        self._provider = None
        self._provider_account_id = None
        self._description = None
        self._potential_savings = None
        self._service = None
        self._created_at = None
        self._resources_affected_count = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if category is not None:
            self.category = category
        if workspace_token is not None:
            self.workspace_token = workspace_token
        if provider is not None:
            self.provider = provider
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if description is not None:
            self.description = description
        if potential_savings is not None:
            self.potential_savings = potential_savings
        if service is not None:
            self.service = service
        if created_at is not None:
            self.created_at = created_at
        if resources_affected_count is not None:
            self.resources_affected_count = resources_affected_count

    @property
    def token(self):
        """Gets the token of this Recommendation.  # noqa: E501


        :return: The token of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Recommendation.


        :param token: The token of this Recommendation.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def category(self):
        """Gets the category of this Recommendation.  # noqa: E501

        The category of the Recommendation.  # noqa: E501

        :return: The category of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Recommendation.

        The category of the Recommendation.  # noqa: E501

        :param category: The category of this Recommendation.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def workspace_token(self):
        """Gets the workspace_token of this Recommendation.  # noqa: E501

        The token for the Workspace the Recommendation is a part of.  # noqa: E501

        :return: The workspace_token of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this Recommendation.

        The token for the Workspace the Recommendation is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this Recommendation.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    @property
    def provider(self):
        """Gets the provider of this Recommendation.  # noqa: E501

        The provider the Recommendation is for.  # noqa: E501

        :return: The provider of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Recommendation.

        The provider the Recommendation is for.  # noqa: E501

        :param provider: The provider of this Recommendation.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this Recommendation.  # noqa: E501

        The account ID of the provider. For Azure, this is the subscription ID.  # noqa: E501

        :return: The provider_account_id of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this Recommendation.

        The account ID of the provider. For Azure, this is the subscription ID.  # noqa: E501

        :param provider_account_id: The provider_account_id of this Recommendation.  # noqa: E501
        :type: str
        """

        self._provider_account_id = provider_account_id

    @property
    def description(self):
        """Gets the description of this Recommendation.  # noqa: E501


        :return: The description of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Recommendation.


        :param description: The description of this Recommendation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def potential_savings(self):
        """Gets the potential_savings of this Recommendation.  # noqa: E501

        The monthly potential savings of the Recommendation.  # noqa: E501

        :return: The potential_savings of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._potential_savings

    @potential_savings.setter
    def potential_savings(self, potential_savings):
        """Sets the potential_savings of this Recommendation.

        The monthly potential savings of the Recommendation.  # noqa: E501

        :param potential_savings: The potential_savings of this Recommendation.  # noqa: E501
        :type: str
        """

        self._potential_savings = potential_savings

    @property
    def service(self):
        """Gets the service of this Recommendation.  # noqa: E501

        The service the Recommendation is for.  # noqa: E501

        :return: The service of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Recommendation.

        The service the Recommendation is for.  # noqa: E501

        :param service: The service of this Recommendation.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def created_at(self):
        """Gets the created_at of this Recommendation.  # noqa: E501

        The date and time, in UTC, the Recommendation was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Recommendation.

        The date and time, in UTC, the Recommendation was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this Recommendation.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def resources_affected_count(self):
        """Gets the resources_affected_count of this Recommendation.  # noqa: E501

        The number of ProviderResources related to the Recommendation. Use the `recommendations/:token/resources` endpoint to get the full list of resources.  # noqa: E501

        :return: The resources_affected_count of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._resources_affected_count

    @resources_affected_count.setter
    def resources_affected_count(self, resources_affected_count):
        """Sets the resources_affected_count of this Recommendation.

        The number of ProviderResources related to the Recommendation. Use the `recommendations/:token/resources` endpoint to get the full list of resources.  # noqa: E501

        :param resources_affected_count: The resources_affected_count of this Recommendation.  # noqa: E501
        :type: str
        """

        self._resources_affected_count = resources_affected_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recommendation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recommendation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Recommendation):
            return True

        return self.to_dict() != other.to_dict()
