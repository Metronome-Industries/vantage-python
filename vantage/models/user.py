# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'name': 'str',
        'email': 'str',
        'role': 'str',
        'last_seen_at': 'str'
    }

    attribute_map = {
        'token': 'token',
        'name': 'name',
        'email': 'email',
        'role': 'role',
        'last_seen_at': 'last_seen_at'
    }

    def __init__(self, token=None, name=None, email=None, role=None, last_seen_at=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._name = None
        self._email = None
        self._role = None
        self._last_seen_at = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if role is not None:
            self.role = role
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at

    @property
    def token(self):
        """Gets the token of this User.  # noqa: E501


        :return: The token of this User.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this User.


        :param token: The token of this User.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        The name of the User.  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The name of the User.  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The email of the User.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email of the User.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501

        The role of the User.  # noqa: E501

        :return: The role of this User.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        The role of the User.  # noqa: E501

        :param role: The role of this User.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this User.  # noqa: E501

        The last time the User logged in.  # noqa: E501

        :return: The last_seen_at of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this User.

        The last time the User logged in.  # noqa: E501

        :param last_seen_at: The last_seen_at of this User.  # noqa: E501
        :type: str
        """

        self._last_seen_at = last_seen_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
