# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class VirtualTagConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'created_by_token': 'str',
        'key': 'str',
        'overridable': 'bool',
        'backfill_until': 'str',
        'values': 'list[VirtualTagConfigValue]'
    }

    attribute_map = {
        'token': 'token',
        'created_by_token': 'created_by_token',
        'key': 'key',
        'overridable': 'overridable',
        'backfill_until': 'backfill_until',
        'values': 'values'
    }

    def __init__(self, token=None, created_by_token=None, key=None, overridable=None, backfill_until=None, values=None, _configuration=None):  # noqa: E501
        """VirtualTagConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._created_by_token = None
        self._key = None
        self._overridable = None
        self._backfill_until = None
        self._values = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if created_by_token is not None:
            self.created_by_token = created_by_token
        if key is not None:
            self.key = key
        if overridable is not None:
            self.overridable = overridable
        if backfill_until is not None:
            self.backfill_until = backfill_until
        if values is not None:
            self.values = values

    @property
    def token(self):
        """Gets the token of this VirtualTagConfig.  # noqa: E501

        The token of the VirtualTagConfig.  # noqa: E501

        :return: The token of this VirtualTagConfig.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this VirtualTagConfig.

        The token of the VirtualTagConfig.  # noqa: E501

        :param token: The token of this VirtualTagConfig.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def created_by_token(self):
        """Gets the created_by_token of this VirtualTagConfig.  # noqa: E501

        The token of the Creator of the VirtualTagConfig.  # noqa: E501

        :return: The created_by_token of this VirtualTagConfig.  # noqa: E501
        :rtype: str
        """
        return self._created_by_token

    @created_by_token.setter
    def created_by_token(self, created_by_token):
        """Sets the created_by_token of this VirtualTagConfig.

        The token of the Creator of the VirtualTagConfig.  # noqa: E501

        :param created_by_token: The created_by_token of this VirtualTagConfig.  # noqa: E501
        :type: str
        """

        self._created_by_token = created_by_token

    @property
    def key(self):
        """Gets the key of this VirtualTagConfig.  # noqa: E501

        The key of the VirtualTagConfig.  # noqa: E501

        :return: The key of this VirtualTagConfig.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this VirtualTagConfig.

        The key of the VirtualTagConfig.  # noqa: E501

        :param key: The key of this VirtualTagConfig.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def overridable(self):
        """Gets the overridable of this VirtualTagConfig.  # noqa: E501

        Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.  # noqa: E501

        :return: The overridable of this VirtualTagConfig.  # noqa: E501
        :rtype: bool
        """
        return self._overridable

    @overridable.setter
    def overridable(self, overridable):
        """Sets the overridable of this VirtualTagConfig.

        Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.  # noqa: E501

        :param overridable: The overridable of this VirtualTagConfig.  # noqa: E501
        :type: bool
        """

        self._overridable = overridable

    @property
    def backfill_until(self):
        """Gets the backfill_until of this VirtualTagConfig.  # noqa: E501

        The earliest month VirtualTagConfig should be backfilled to.  # noqa: E501

        :return: The backfill_until of this VirtualTagConfig.  # noqa: E501
        :rtype: str
        """
        return self._backfill_until

    @backfill_until.setter
    def backfill_until(self, backfill_until):
        """Sets the backfill_until of this VirtualTagConfig.

        The earliest month VirtualTagConfig should be backfilled to.  # noqa: E501

        :param backfill_until: The backfill_until of this VirtualTagConfig.  # noqa: E501
        :type: str
        """

        self._backfill_until = backfill_until

    @property
    def values(self):
        """Gets the values of this VirtualTagConfig.  # noqa: E501

        Values for the VirtualTagConfig, with match precedence determined by their relative order in the list.  # noqa: E501

        :return: The values of this VirtualTagConfig.  # noqa: E501
        :rtype: list[VirtualTagConfigValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this VirtualTagConfig.

        Values for the VirtualTagConfig, with match precedence determined by their relative order in the list.  # noqa: E501

        :param values: The values of this VirtualTagConfig.  # noqa: E501
        :type: list[VirtualTagConfigValue]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualTagConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualTagConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualTagConfig):
            return True

        return self.to_dict() != other.to_dict()
