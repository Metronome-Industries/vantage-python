# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'name': 'str',
        'description': 'str',
        'workspace_tokens': 'list[str]',
        'user_emails': 'list[str]',
        'user_tokens': 'list[str]'
    }

    attribute_map = {
        'token': 'token',
        'name': 'name',
        'description': 'description',
        'workspace_tokens': 'workspace_tokens',
        'user_emails': 'user_emails',
        'user_tokens': 'user_tokens'
    }

    def __init__(self, token=None, name=None, description=None, workspace_tokens=None, user_emails=None, user_tokens=None, _configuration=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._name = None
        self._description = None
        self._workspace_tokens = None
        self._user_emails = None
        self._user_tokens = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if workspace_tokens is not None:
            self.workspace_tokens = workspace_tokens
        if user_emails is not None:
            self.user_emails = user_emails
        if user_tokens is not None:
            self.user_tokens = user_tokens

    @property
    def token(self):
        """Gets the token of this Team.  # noqa: E501


        :return: The token of this Team.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Team.


        :param token: The token of this Team.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501

        The name of the Team.  # noqa: E501

        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        The name of the Team.  # noqa: E501

        :param name: The name of this Team.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Team.  # noqa: E501

        The description of the Team.  # noqa: E501

        :return: The description of this Team.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Team.

        The description of the Team.  # noqa: E501

        :param description: The description of this Team.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workspace_tokens(self):
        """Gets the workspace_tokens of this Team.  # noqa: E501

        The tokens for any Workspaces that the Team belongs to  # noqa: E501

        :return: The workspace_tokens of this Team.  # noqa: E501
        :rtype: list[str]
        """
        return self._workspace_tokens

    @workspace_tokens.setter
    def workspace_tokens(self, workspace_tokens):
        """Sets the workspace_tokens of this Team.

        The tokens for any Workspaces that the Team belongs to  # noqa: E501

        :param workspace_tokens: The workspace_tokens of this Team.  # noqa: E501
        :type: list[str]
        """

        self._workspace_tokens = workspace_tokens

    @property
    def user_emails(self):
        """Gets the user_emails of this Team.  # noqa: E501

        The email addresses for Users that belong to the Team  # noqa: E501

        :return: The user_emails of this Team.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_emails

    @user_emails.setter
    def user_emails(self, user_emails):
        """Sets the user_emails of this Team.

        The email addresses for Users that belong to the Team  # noqa: E501

        :param user_emails: The user_emails of this Team.  # noqa: E501
        :type: list[str]
        """

        self._user_emails = user_emails

    @property
    def user_tokens(self):
        """Gets the user_tokens of this Team.  # noqa: E501

        The tokens for Users that belong to the Team  # noqa: E501

        :return: The user_tokens of this Team.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_tokens

    @user_tokens.setter
    def user_tokens(self, user_tokens):
        """Sets the user_tokens of this Team.

        The tokens for Users that belong to the Team  # noqa: E501

        :param user_tokens: The user_tokens of this Team.  # noqa: E501
        :type: list[str]
        """

        self._user_tokens = user_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Team):
            return True

        return self.to_dict() != other.to_dict()
