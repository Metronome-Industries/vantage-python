# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class FinancialCommitmentReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'title': 'str',
        'default': 'bool',
        'created_at': 'str',
        'workspace_token': 'str',
        'user_token': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'date_interval': 'str',
        'date_bucket': 'str',
        'groupings': 'str',
        'on_demand_costs_scope': 'str',
        'filter': 'str'
    }

    attribute_map = {
        'token': 'token',
        'title': 'title',
        'default': 'default',
        'created_at': 'created_at',
        'workspace_token': 'workspace_token',
        'user_token': 'user_token',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'date_interval': 'date_interval',
        'date_bucket': 'date_bucket',
        'groupings': 'groupings',
        'on_demand_costs_scope': 'on_demand_costs_scope',
        'filter': 'filter'
    }

    def __init__(self, token=None, title=None, default=None, created_at=None, workspace_token=None, user_token=None, start_date=None, end_date=None, date_interval=None, date_bucket=None, groupings=None, on_demand_costs_scope=None, filter=None, _configuration=None):  # noqa: E501
        """FinancialCommitmentReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._title = None
        self._default = None
        self._created_at = None
        self._workspace_token = None
        self._user_token = None
        self._start_date = None
        self._end_date = None
        self._date_interval = None
        self._date_bucket = None
        self._groupings = None
        self._on_demand_costs_scope = None
        self._filter = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if title is not None:
            self.title = title
        if default is not None:
            self.default = default
        if created_at is not None:
            self.created_at = created_at
        if workspace_token is not None:
            self.workspace_token = workspace_token
        if user_token is not None:
            self.user_token = user_token
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if date_interval is not None:
            self.date_interval = date_interval
        if date_bucket is not None:
            self.date_bucket = date_bucket
        if groupings is not None:
            self.groupings = groupings
        if on_demand_costs_scope is not None:
            self.on_demand_costs_scope = on_demand_costs_scope
        if filter is not None:
            self.filter = filter

    @property
    def token(self):
        """Gets the token of this FinancialCommitmentReport.  # noqa: E501


        :return: The token of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this FinancialCommitmentReport.


        :param token: The token of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def title(self):
        """Gets the title of this FinancialCommitmentReport.  # noqa: E501

        The title of the FinancialCommitmentReport.  # noqa: E501

        :return: The title of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FinancialCommitmentReport.

        The title of the FinancialCommitmentReport.  # noqa: E501

        :param title: The title of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def default(self):
        """Gets the default of this FinancialCommitmentReport.  # noqa: E501

        Indicates whether the FinancialCommitmentReport is the default report.  # noqa: E501

        :return: The default of this FinancialCommitmentReport.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this FinancialCommitmentReport.

        Indicates whether the FinancialCommitmentReport is the default report.  # noqa: E501

        :param default: The default of this FinancialCommitmentReport.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def created_at(self):
        """Gets the created_at of this FinancialCommitmentReport.  # noqa: E501

        The date and time, in UTC, the report was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FinancialCommitmentReport.

        The date and time, in UTC, the report was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def workspace_token(self):
        """Gets the workspace_token of this FinancialCommitmentReport.  # noqa: E501

        The token for the Workspace the FinancialCommitmentReport is a part of.  # noqa: E501

        :return: The workspace_token of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this FinancialCommitmentReport.

        The token for the Workspace the FinancialCommitmentReport is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    @property
    def user_token(self):
        """Gets the user_token of this FinancialCommitmentReport.  # noqa: E501

        The token for the User who created this FinancialCommitmentReport.  # noqa: E501

        :return: The user_token of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._user_token

    @user_token.setter
    def user_token(self, user_token):
        """Sets the user_token of this FinancialCommitmentReport.

        The token for the User who created this FinancialCommitmentReport.  # noqa: E501

        :param user_token: The user_token of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._user_token = user_token

    @property
    def start_date(self):
        """Gets the start_date of this FinancialCommitmentReport.  # noqa: E501

        The start date for the FinancialCommitmentReport. Only set for custom date ranges. ISO 8601 Formatted.  # noqa: E501

        :return: The start_date of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this FinancialCommitmentReport.

        The start date for the FinancialCommitmentReport. Only set for custom date ranges. ISO 8601 Formatted.  # noqa: E501

        :param start_date: The start_date of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this FinancialCommitmentReport.  # noqa: E501

        The end date for the FinancialCommitmentReport. Only set for custom date ranges. ISO 8601 Formatted.  # noqa: E501

        :return: The end_date of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this FinancialCommitmentReport.

        The end date for the FinancialCommitmentReport. Only set for custom date ranges. ISO 8601 Formatted.  # noqa: E501

        :param end_date: The end_date of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def date_interval(self):
        """Gets the date_interval of this FinancialCommitmentReport.  # noqa: E501

        The date range for the FinancialCommitmentReport. Only present if a custom date range is not specified.  # noqa: E501

        :return: The date_interval of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._date_interval

    @date_interval.setter
    def date_interval(self, date_interval):
        """Sets the date_interval of this FinancialCommitmentReport.

        The date range for the FinancialCommitmentReport. Only present if a custom date range is not specified.  # noqa: E501

        :param date_interval: The date_interval of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._date_interval = date_interval

    @property
    def date_bucket(self):
        """Gets the date_bucket of this FinancialCommitmentReport.  # noqa: E501

        How costs are grouped and displayed in the FinancialCommitmentReport. Possible values: day, week, month.  # noqa: E501

        :return: The date_bucket of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._date_bucket

    @date_bucket.setter
    def date_bucket(self, date_bucket):
        """Sets the date_bucket of this FinancialCommitmentReport.

        How costs are grouped and displayed in the FinancialCommitmentReport. Possible values: day, week, month.  # noqa: E501

        :param date_bucket: The date_bucket of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._date_bucket = date_bucket

    @property
    def groupings(self):
        """Gets the groupings of this FinancialCommitmentReport.  # noqa: E501

        The grouping aggregations applied to the filtered data.  # noqa: E501

        :return: The groupings of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._groupings

    @groupings.setter
    def groupings(self, groupings):
        """Sets the groupings of this FinancialCommitmentReport.

        The grouping aggregations applied to the filtered data.  # noqa: E501

        :param groupings: The groupings of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._groupings = groupings

    @property
    def on_demand_costs_scope(self):
        """Gets the on_demand_costs_scope of this FinancialCommitmentReport.  # noqa: E501

        The scope for the costs. Possible values: discountable, all.  # noqa: E501

        :return: The on_demand_costs_scope of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._on_demand_costs_scope

    @on_demand_costs_scope.setter
    def on_demand_costs_scope(self, on_demand_costs_scope):
        """Sets the on_demand_costs_scope of this FinancialCommitmentReport.

        The scope for the costs. Possible values: discountable, all.  # noqa: E501

        :param on_demand_costs_scope: The on_demand_costs_scope of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._on_demand_costs_scope = on_demand_costs_scope

    @property
    def filter(self):
        """Gets the filter of this FinancialCommitmentReport.  # noqa: E501

        The filter applied to the FinancialCommitmentReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :return: The filter of this FinancialCommitmentReport.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this FinancialCommitmentReport.

        The filter applied to the FinancialCommitmentReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :param filter: The filter of this FinancialCommitmentReport.  # noqa: E501
        :type: str
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialCommitmentReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialCommitmentReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FinancialCommitmentReport):
            return True

        return self.to_dict() != other.to_dict()
