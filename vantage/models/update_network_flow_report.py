# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class UpdateNetworkFlowReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'filter': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'date_interval': 'str',
        'groupings': 'list[str]',
        'flow_direction': 'str',
        'flow_weight': 'str'
    }

    attribute_map = {
        'title': 'title',
        'filter': 'filter',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'date_interval': 'date_interval',
        'groupings': 'groupings',
        'flow_direction': 'flow_direction',
        'flow_weight': 'flow_weight'
    }

    def __init__(self, title=None, filter=None, start_date=None, end_date=None, date_interval=None, groupings=None, flow_direction=None, flow_weight=None, _configuration=None):  # noqa: E501
        """UpdateNetworkFlowReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._filter = None
        self._start_date = None
        self._end_date = None
        self._date_interval = None
        self._groupings = None
        self._flow_direction = None
        self._flow_weight = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if filter is not None:
            self.filter = filter
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if date_interval is not None:
            self.date_interval = date_interval
        if groupings is not None:
            self.groupings = groupings
        if flow_direction is not None:
            self.flow_direction = flow_direction
        if flow_weight is not None:
            self.flow_weight = flow_weight

    @property
    def title(self):
        """Gets the title of this UpdateNetworkFlowReport.  # noqa: E501

        The title of the NetworkFlowReport.  # noqa: E501

        :return: The title of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateNetworkFlowReport.

        The title of the NetworkFlowReport.  # noqa: E501

        :param title: The title of this UpdateNetworkFlowReport.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def filter(self):
        """Gets the filter of this UpdateNetworkFlowReport.  # noqa: E501

        The filter query language to apply to the NetworkFlowReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :return: The filter of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this UpdateNetworkFlowReport.

        The filter query language to apply to the NetworkFlowReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :param filter: The filter of this UpdateNetworkFlowReport.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def start_date(self):
        """Gets the start_date of this UpdateNetworkFlowReport.  # noqa: E501

        The start date of the NetworkFlowReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :return: The start_date of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UpdateNetworkFlowReport.

        The start date of the NetworkFlowReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :param start_date: The start_date of this UpdateNetworkFlowReport.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this UpdateNetworkFlowReport.  # noqa: E501

        The end date of the NetworkFlowReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :return: The end_date of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UpdateNetworkFlowReport.

        The end date of the NetworkFlowReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :param end_date: The end_date of this UpdateNetworkFlowReport.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def date_interval(self):
        """Gets the date_interval of this UpdateNetworkFlowReport.  # noqa: E501

        The date interval of the NetworkFlowReport. Unless 'custom' is used, this is incompatible with 'start_date' and 'end_date' parameters. Defaults to 'last_7_days'.  # noqa: E501

        :return: The date_interval of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: str
        """
        return self._date_interval

    @date_interval.setter
    def date_interval(self, date_interval):
        """Sets the date_interval of this UpdateNetworkFlowReport.

        The date interval of the NetworkFlowReport. Unless 'custom' is used, this is incompatible with 'start_date' and 'end_date' parameters. Defaults to 'last_7_days'.  # noqa: E501

        :param date_interval: The date_interval of this UpdateNetworkFlowReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["last_3_days", "last_7_days", "custom"]  # noqa: E501
        if (self._configuration.client_side_validation and
                date_interval not in allowed_values):
            raise ValueError(
                "Invalid value for `date_interval` ({0}), must be one of {1}"  # noqa: E501
                .format(date_interval, allowed_values)
            )

        self._date_interval = date_interval

    @property
    def groupings(self):
        """Gets the groupings of this UpdateNetworkFlowReport.  # noqa: E501

        Grouping values for aggregating data on the NetworkFlowReport. Valid groupings: account_id, az_id, dstaddr, dsthostname, flow_direction, interface_id, instance_id, peer_resource_uuid, peer_account_id, peer_vpc_id, peer_region, peer_az_id, peer_subnet_id, peer_interface_id, peer_instance_id, region, resource_uuid, srcaddr, srchostname, subnet_id, traffic_category, traffic_path, vpc_id.  # noqa: E501

        :return: The groupings of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._groupings

    @groupings.setter
    def groupings(self, groupings):
        """Sets the groupings of this UpdateNetworkFlowReport.

        Grouping values for aggregating data on the NetworkFlowReport. Valid groupings: account_id, az_id, dstaddr, dsthostname, flow_direction, interface_id, instance_id, peer_resource_uuid, peer_account_id, peer_vpc_id, peer_region, peer_az_id, peer_subnet_id, peer_interface_id, peer_instance_id, region, resource_uuid, srcaddr, srchostname, subnet_id, traffic_category, traffic_path, vpc_id.  # noqa: E501

        :param groupings: The groupings of this UpdateNetworkFlowReport.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["account_id", "az_id", "dstaddr", "dsthostname", "flow_direction", "interface_id", "instance_id", "peer_resource_uuid", "peer_account_id", "peer_vpc_id", "peer_region", "peer_az_id", "peer_subnet_id", "peer_interface_id", "peer_instance_id", "region", "resource_uuid", "srcaddr", "srchostname", "subnet_id", "traffic_category", "traffic_path", "vpc_id"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(groupings).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `groupings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(groupings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._groupings = groupings

    @property
    def flow_direction(self):
        """Gets the flow_direction of this UpdateNetworkFlowReport.  # noqa: E501

        The flow direction of the NetworkFlowReport.  # noqa: E501

        :return: The flow_direction of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: str
        """
        return self._flow_direction

    @flow_direction.setter
    def flow_direction(self, flow_direction):
        """Sets the flow_direction of this UpdateNetworkFlowReport.

        The flow direction of the NetworkFlowReport.  # noqa: E501

        :param flow_direction: The flow_direction of this UpdateNetworkFlowReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["ingress", "egress"]  # noqa: E501
        if (self._configuration.client_side_validation and
                flow_direction not in allowed_values):
            raise ValueError(
                "Invalid value for `flow_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(flow_direction, allowed_values)
            )

        self._flow_direction = flow_direction

    @property
    def flow_weight(self):
        """Gets the flow_weight of this UpdateNetworkFlowReport.  # noqa: E501

        The dimension by which the logs in the report are sorted. Defaults to costs.  # noqa: E501

        :return: The flow_weight of this UpdateNetworkFlowReport.  # noqa: E501
        :rtype: str
        """
        return self._flow_weight

    @flow_weight.setter
    def flow_weight(self, flow_weight):
        """Sets the flow_weight of this UpdateNetworkFlowReport.

        The dimension by which the logs in the report are sorted. Defaults to costs.  # noqa: E501

        :param flow_weight: The flow_weight of this UpdateNetworkFlowReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["costs", "bytes"]  # noqa: E501
        if (self._configuration.client_side_validation and
                flow_weight not in allowed_values):
            raise ValueError(
                "Invalid value for `flow_weight` ({0}), must be one of {1}"  # noqa: E501
                .format(flow_weight, allowed_values)
            )

        self._flow_weight = flow_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateNetworkFlowReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateNetworkFlowReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateNetworkFlowReport):
            return True

        return self.to_dict() != other.to_dict()
