# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class BudgetPerformance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'actual': 'str',
        'amount': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'actual': 'actual',
        'amount': 'amount'
    }

    def __init__(self, _date=None, actual=None, amount=None, _configuration=None):  # noqa: E501
        """BudgetPerformance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._actual = None
        self._amount = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if actual is not None:
            self.actual = actual
        if amount is not None:
            self.amount = amount

    @property
    def _date(self):
        """Gets the _date of this BudgetPerformance.  # noqa: E501

        The date and time, in UTC, the Budget was created. ISO 8601 Formatted.  # noqa: E501

        :return: The _date of this BudgetPerformance.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BudgetPerformance.

        The date and time, in UTC, the Budget was created. ISO 8601 Formatted.  # noqa: E501

        :param _date: The _date of this BudgetPerformance.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def actual(self):
        """Gets the actual of this BudgetPerformance.  # noqa: E501

        The date and time, in UTC, the Budget was created. ISO 8601 Formatted.  # noqa: E501

        :return: The actual of this BudgetPerformance.  # noqa: E501
        :rtype: str
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this BudgetPerformance.

        The date and time, in UTC, the Budget was created. ISO 8601 Formatted.  # noqa: E501

        :param actual: The actual of this BudgetPerformance.  # noqa: E501
        :type: str
        """

        self._actual = actual

    @property
    def amount(self):
        """Gets the amount of this BudgetPerformance.  # noqa: E501

        The amount of the Budget Period as a string to ensure precision.  # noqa: E501

        :return: The amount of this BudgetPerformance.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BudgetPerformance.

        The amount of the Budget Period as a string to ensure precision.  # noqa: E501

        :param amount: The amount of this BudgetPerformance.  # noqa: E501
        :type: str
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetPerformance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetPerformance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetPerformance):
            return True

        return self.to_dict() != other.to_dict()
