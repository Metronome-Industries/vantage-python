# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class SavedFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'title': 'str',
        'cost_report_tokens': 'list[str]',
        'filter': 'str',
        'created_at': 'str',
        'created_by': 'str',
        'workspace_token': 'str'
    }

    attribute_map = {
        'token': 'token',
        'title': 'title',
        'cost_report_tokens': 'cost_report_tokens',
        'filter': 'filter',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'workspace_token': 'workspace_token'
    }

    def __init__(self, token=None, title=None, cost_report_tokens=None, filter=None, created_at=None, created_by=None, workspace_token=None, _configuration=None):  # noqa: E501
        """SavedFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._title = None
        self._cost_report_tokens = None
        self._filter = None
        self._created_at = None
        self._created_by = None
        self._workspace_token = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if title is not None:
            self.title = title
        if cost_report_tokens is not None:
            self.cost_report_tokens = cost_report_tokens
        if filter is not None:
            self.filter = filter
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if workspace_token is not None:
            self.workspace_token = workspace_token

    @property
    def token(self):
        """Gets the token of this SavedFilter.  # noqa: E501


        :return: The token of this SavedFilter.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SavedFilter.


        :param token: The token of this SavedFilter.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def title(self):
        """Gets the title of this SavedFilter.  # noqa: E501

        The title of the SavedFilter.  # noqa: E501

        :return: The title of this SavedFilter.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SavedFilter.

        The title of the SavedFilter.  # noqa: E501

        :param title: The title of this SavedFilter.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def cost_report_tokens(self):
        """Gets the cost_report_tokens of this SavedFilter.  # noqa: E501

        The tokens for any CostReports the SavedFilter is applied to.  # noqa: E501

        :return: The cost_report_tokens of this SavedFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._cost_report_tokens

    @cost_report_tokens.setter
    def cost_report_tokens(self, cost_report_tokens):
        """Sets the cost_report_tokens of this SavedFilter.

        The tokens for any CostReports the SavedFilter is applied to.  # noqa: E501

        :param cost_report_tokens: The cost_report_tokens of this SavedFilter.  # noqa: E501
        :type: list[str]
        """

        self._cost_report_tokens = cost_report_tokens

    @property
    def filter(self):
        """Gets the filter of this SavedFilter.  # noqa: E501

        The SavedFilter's filter, applied to any relevant CostReports. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :return: The filter of this SavedFilter.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SavedFilter.

        The SavedFilter's filter, applied to any relevant CostReports. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :param filter: The filter of this SavedFilter.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def created_at(self):
        """Gets the created_at of this SavedFilter.  # noqa: E501

        The date and time, in UTC, the report was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this SavedFilter.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SavedFilter.

        The date and time, in UTC, the report was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this SavedFilter.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this SavedFilter.  # noqa: E501

        The token for the Creator of this SavedFilter.  # noqa: E501

        :return: The created_by of this SavedFilter.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SavedFilter.

        The token for the Creator of this SavedFilter.  # noqa: E501

        :param created_by: The created_by of this SavedFilter.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def workspace_token(self):
        """Gets the workspace_token of this SavedFilter.  # noqa: E501

        The token for the Workspace the SavedFilter is a part of.  # noqa: E501

        :return: The workspace_token of this SavedFilter.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this SavedFilter.

        The token for the Workspace the SavedFilter is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this SavedFilter.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavedFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavedFilter):
            return True

        return self.to_dict() != other.to_dict()
