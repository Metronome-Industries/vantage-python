# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class CreateManagedAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'contact_email': 'str',
        'access_credential_tokens': 'list[str]',
        'billing_rule_tokens': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'contact_email': 'contact_email',
        'access_credential_tokens': 'access_credential_tokens',
        'billing_rule_tokens': 'billing_rule_tokens'
    }

    def __init__(self, name=None, contact_email=None, access_credential_tokens=None, billing_rule_tokens=None, _configuration=None):  # noqa: E501
        """CreateManagedAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._contact_email = None
        self._access_credential_tokens = None
        self._billing_rule_tokens = None
        self.discriminator = None

        self.name = name
        self.contact_email = contact_email
        if access_credential_tokens is not None:
            self.access_credential_tokens = access_credential_tokens
        if billing_rule_tokens is not None:
            self.billing_rule_tokens = billing_rule_tokens

    @property
    def name(self):
        """Gets the name of this CreateManagedAccount.  # noqa: E501

        The name of the Managed Account.  # noqa: E501

        :return: The name of this CreateManagedAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateManagedAccount.

        The name of the Managed Account.  # noqa: E501

        :param name: The name of this CreateManagedAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact_email(self):
        """Gets the contact_email of this CreateManagedAccount.  # noqa: E501

        The contact email address for the Managed Account.  # noqa: E501

        :return: The contact_email of this CreateManagedAccount.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this CreateManagedAccount.

        The contact email address for the Managed Account.  # noqa: E501

        :param contact_email: The contact_email of this CreateManagedAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def access_credential_tokens(self):
        """Gets the access_credential_tokens of this CreateManagedAccount.  # noqa: E501

        Access Credential (aka Integrations) tokens to assign to the Managed Account.  # noqa: E501

        :return: The access_credential_tokens of this CreateManagedAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_credential_tokens

    @access_credential_tokens.setter
    def access_credential_tokens(self, access_credential_tokens):
        """Sets the access_credential_tokens of this CreateManagedAccount.

        Access Credential (aka Integrations) tokens to assign to the Managed Account.  # noqa: E501

        :param access_credential_tokens: The access_credential_tokens of this CreateManagedAccount.  # noqa: E501
        :type: list[str]
        """

        self._access_credential_tokens = access_credential_tokens

    @property
    def billing_rule_tokens(self):
        """Gets the billing_rule_tokens of this CreateManagedAccount.  # noqa: E501

        Billing Rule tokens to assign to the Managed Account.  # noqa: E501

        :return: The billing_rule_tokens of this CreateManagedAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._billing_rule_tokens

    @billing_rule_tokens.setter
    def billing_rule_tokens(self, billing_rule_tokens):
        """Sets the billing_rule_tokens of this CreateManagedAccount.

        Billing Rule tokens to assign to the Managed Account.  # noqa: E501

        :param billing_rule_tokens: The billing_rule_tokens of this CreateManagedAccount.  # noqa: E501
        :type: list[str]
        """

        self._billing_rule_tokens = billing_rule_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateManagedAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateManagedAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateManagedAccount):
            return True

        return self.to_dict() != other.to_dict()
