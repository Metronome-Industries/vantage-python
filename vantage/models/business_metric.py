# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class BusinessMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'title': 'str',
        'created_by_token': 'str',
        'cost_report_tokens_with_metadata': 'list[AttachedCostReportForBusinessMetric]'
    }

    attribute_map = {
        'token': 'token',
        'title': 'title',
        'created_by_token': 'created_by_token',
        'cost_report_tokens_with_metadata': 'cost_report_tokens_with_metadata'
    }

    def __init__(self, token=None, title=None, created_by_token=None, cost_report_tokens_with_metadata=None, _configuration=None):  # noqa: E501
        """BusinessMetric - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._title = None
        self._created_by_token = None
        self._cost_report_tokens_with_metadata = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if title is not None:
            self.title = title
        if created_by_token is not None:
            self.created_by_token = created_by_token
        if cost_report_tokens_with_metadata is not None:
            self.cost_report_tokens_with_metadata = cost_report_tokens_with_metadata

    @property
    def token(self):
        """Gets the token of this BusinessMetric.  # noqa: E501

        The token of the BusinessMetric.  # noqa: E501

        :return: The token of this BusinessMetric.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BusinessMetric.

        The token of the BusinessMetric.  # noqa: E501

        :param token: The token of this BusinessMetric.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def title(self):
        """Gets the title of this BusinessMetric.  # noqa: E501

        The title of the BusinessMetric.  # noqa: E501

        :return: The title of this BusinessMetric.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BusinessMetric.

        The title of the BusinessMetric.  # noqa: E501

        :param title: The title of this BusinessMetric.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def created_by_token(self):
        """Gets the created_by_token of this BusinessMetric.  # noqa: E501

        The token of the Creator of the BusinessMetric.  # noqa: E501

        :return: The created_by_token of this BusinessMetric.  # noqa: E501
        :rtype: str
        """
        return self._created_by_token

    @created_by_token.setter
    def created_by_token(self, created_by_token):
        """Sets the created_by_token of this BusinessMetric.

        The token of the Creator of the BusinessMetric.  # noqa: E501

        :param created_by_token: The created_by_token of this BusinessMetric.  # noqa: E501
        :type: str
        """

        self._created_by_token = created_by_token

    @property
    def cost_report_tokens_with_metadata(self):
        """Gets the cost_report_tokens_with_metadata of this BusinessMetric.  # noqa: E501

        The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.  # noqa: E501

        :return: The cost_report_tokens_with_metadata of this BusinessMetric.  # noqa: E501
        :rtype: list[AttachedCostReportForBusinessMetric]
        """
        return self._cost_report_tokens_with_metadata

    @cost_report_tokens_with_metadata.setter
    def cost_report_tokens_with_metadata(self, cost_report_tokens_with_metadata):
        """Sets the cost_report_tokens_with_metadata of this BusinessMetric.

        The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.  # noqa: E501

        :param cost_report_tokens_with_metadata: The cost_report_tokens_with_metadata of this BusinessMetric.  # noqa: E501
        :type: list[AttachedCostReportForBusinessMetric]
        """

        self._cost_report_tokens_with_metadata = cost_report_tokens_with_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BusinessMetric):
            return True

        return self.to_dict() != other.to_dict()
