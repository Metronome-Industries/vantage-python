# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class AnomalyAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'created_at': 'str',
        'alerted_at': 'str',
        'category': 'str',
        'service': 'str',
        'provider': 'str',
        'amount': 'str',
        'previous_amount': 'str',
        'seven_day_average': 'str',
        'status': 'str',
        'feedback': 'str',
        'cost_report_token': 'str'
    }

    attribute_map = {
        'token': 'token',
        'created_at': 'created_at',
        'alerted_at': 'alerted_at',
        'category': 'category',
        'service': 'service',
        'provider': 'provider',
        'amount': 'amount',
        'previous_amount': 'previous_amount',
        'seven_day_average': 'seven_day_average',
        'status': 'status',
        'feedback': 'feedback',
        'cost_report_token': 'cost_report_token'
    }

    def __init__(self, token=None, created_at=None, alerted_at=None, category=None, service=None, provider=None, amount=None, previous_amount=None, seven_day_average=None, status=None, feedback=None, cost_report_token=None, _configuration=None):  # noqa: E501
        """AnomalyAlert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._created_at = None
        self._alerted_at = None
        self._category = None
        self._service = None
        self._provider = None
        self._amount = None
        self._previous_amount = None
        self._seven_day_average = None
        self._status = None
        self._feedback = None
        self._cost_report_token = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if created_at is not None:
            self.created_at = created_at
        if alerted_at is not None:
            self.alerted_at = alerted_at
        if category is not None:
            self.category = category
        if service is not None:
            self.service = service
        if provider is not None:
            self.provider = provider
        if amount is not None:
            self.amount = amount
        if previous_amount is not None:
            self.previous_amount = previous_amount
        if seven_day_average is not None:
            self.seven_day_average = seven_day_average
        if status is not None:
            self.status = status
        if feedback is not None:
            self.feedback = feedback
        if cost_report_token is not None:
            self.cost_report_token = cost_report_token

    @property
    def token(self):
        """Gets the token of this AnomalyAlert.  # noqa: E501


        :return: The token of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AnomalyAlert.


        :param token: The token of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def created_at(self):
        """Gets the created_at of this AnomalyAlert.  # noqa: E501

        The date and time, in UTC, the AnomalyAlert was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnomalyAlert.

        The date and time, in UTC, the AnomalyAlert was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def alerted_at(self):
        """Gets the alerted_at of this AnomalyAlert.  # noqa: E501

        The date and time, in UTC, the AnomalyAlert is sent. ISO 8601 Formatted.  # noqa: E501

        :return: The alerted_at of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._alerted_at

    @alerted_at.setter
    def alerted_at(self, alerted_at):
        """Sets the alerted_at of this AnomalyAlert.

        The date and time, in UTC, the AnomalyAlert is sent. ISO 8601 Formatted.  # noqa: E501

        :param alerted_at: The alerted_at of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._alerted_at = alerted_at

    @property
    def category(self):
        """Gets the category of this AnomalyAlert.  # noqa: E501

        The category of the AnomalyAlert.  # noqa: E501

        :return: The category of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AnomalyAlert.

        The category of the AnomalyAlert.  # noqa: E501

        :param category: The category of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def service(self):
        """Gets the service of this AnomalyAlert.  # noqa: E501

        The provider service causing the AnomalyAlert.  # noqa: E501

        :return: The service of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AnomalyAlert.

        The provider service causing the AnomalyAlert.  # noqa: E501

        :param service: The service of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def provider(self):
        """Gets the provider of this AnomalyAlert.  # noqa: E501

        The provider of the service causing the AnomalyAlert.  # noqa: E501

        :return: The provider of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AnomalyAlert.

        The provider of the service causing the AnomalyAlert.  # noqa: E501

        :param provider: The provider of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def amount(self):
        """Gets the amount of this AnomalyAlert.  # noqa: E501

        The amount observed.  # noqa: E501

        :return: The amount of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AnomalyAlert.

        The amount observed.  # noqa: E501

        :param amount: The amount of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def previous_amount(self):
        """Gets the previous_amount of this AnomalyAlert.  # noqa: E501

        The previous amount observed.  # noqa: E501

        :return: The previous_amount of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._previous_amount

    @previous_amount.setter
    def previous_amount(self, previous_amount):
        """Sets the previous_amount of this AnomalyAlert.

        The previous amount observed.  # noqa: E501

        :param previous_amount: The previous_amount of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._previous_amount = previous_amount

    @property
    def seven_day_average(self):
        """Gets the seven_day_average of this AnomalyAlert.  # noqa: E501

        The seven day average of the amount observed.  # noqa: E501

        :return: The seven_day_average of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._seven_day_average

    @seven_day_average.setter
    def seven_day_average(self, seven_day_average):
        """Sets the seven_day_average of this AnomalyAlert.

        The seven day average of the amount observed.  # noqa: E501

        :param seven_day_average: The seven_day_average of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._seven_day_average = seven_day_average

    @property
    def status(self):
        """Gets the status of this AnomalyAlert.  # noqa: E501

        The status of the AnomalyAlert.  # noqa: E501

        :return: The status of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnomalyAlert.

        The status of the AnomalyAlert.  # noqa: E501

        :param status: The status of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def feedback(self):
        """Gets the feedback of this AnomalyAlert.  # noqa: E501

        The user-provided feedback of why alert was ignored/archived.  # noqa: E501

        :return: The feedback of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this AnomalyAlert.

        The user-provided feedback of why alert was ignored/archived.  # noqa: E501

        :param feedback: The feedback of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._feedback = feedback

    @property
    def cost_report_token(self):
        """Gets the cost_report_token of this AnomalyAlert.  # noqa: E501

        The token of the Report associated with the AnomalyAlert.  # noqa: E501

        :return: The cost_report_token of this AnomalyAlert.  # noqa: E501
        :rtype: str
        """
        return self._cost_report_token

    @cost_report_token.setter
    def cost_report_token(self, cost_report_token):
        """Sets the cost_report_token of this AnomalyAlert.

        The token of the Report associated with the AnomalyAlert.  # noqa: E501

        :param cost_report_token: The cost_report_token of this AnomalyAlert.  # noqa: E501
        :type: str
        """

        self._cost_report_token = cost_report_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnomalyAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnomalyAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnomalyAlert):
            return True

        return self.to_dict() != other.to_dict()
