# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Workspace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'name': 'str',
        'created_at': 'str',
        'enable_currency_conversion': 'bool',
        'currency': 'str',
        'exchange_rate_date': 'str'
    }

    attribute_map = {
        'token': 'token',
        'name': 'name',
        'created_at': 'created_at',
        'enable_currency_conversion': 'enable_currency_conversion',
        'currency': 'currency',
        'exchange_rate_date': 'exchange_rate_date'
    }

    def __init__(self, token=None, name=None, created_at=None, enable_currency_conversion=None, currency=None, exchange_rate_date=None, _configuration=None):  # noqa: E501
        """Workspace - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._name = None
        self._created_at = None
        self._enable_currency_conversion = None
        self._currency = None
        self._exchange_rate_date = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if enable_currency_conversion is not None:
            self.enable_currency_conversion = enable_currency_conversion
        if currency is not None:
            self.currency = currency
        if exchange_rate_date is not None:
            self.exchange_rate_date = exchange_rate_date

    @property
    def token(self):
        """Gets the token of this Workspace.  # noqa: E501


        :return: The token of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Workspace.


        :param token: The token of this Workspace.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def name(self):
        """Gets the name of this Workspace.  # noqa: E501

        The name of the Workspace.  # noqa: E501

        :return: The name of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workspace.

        The name of the Workspace.  # noqa: E501

        :param name: The name of this Workspace.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this Workspace.  # noqa: E501

        The date and time, in UTC, the Workspace was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workspace.

        The date and time, in UTC, the Workspace was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this Workspace.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def enable_currency_conversion(self):
        """Gets the enable_currency_conversion of this Workspace.  # noqa: E501

        Whether or not currency conversion is enabled for the Workspace.  # noqa: E501

        :return: The enable_currency_conversion of this Workspace.  # noqa: E501
        :rtype: bool
        """
        return self._enable_currency_conversion

    @enable_currency_conversion.setter
    def enable_currency_conversion(self, enable_currency_conversion):
        """Sets the enable_currency_conversion of this Workspace.

        Whether or not currency conversion is enabled for the Workspace.  # noqa: E501

        :param enable_currency_conversion: The enable_currency_conversion of this Workspace.  # noqa: E501
        :type: bool
        """

        self._enable_currency_conversion = enable_currency_conversion

    @property
    def currency(self):
        """Gets the currency of this Workspace.  # noqa: E501

        The currency code for the Workspace that will be used for currency conversion.  # noqa: E501

        :return: The currency of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Workspace.

        The currency code for the Workspace that will be used for currency conversion.  # noqa: E501

        :param currency: The currency of this Workspace.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange_rate_date(self):
        """Gets the exchange_rate_date of this Workspace.  # noqa: E501

        The exchange rate date that will be used to convert currency for your cost data.  # noqa: E501

        :return: The exchange_rate_date of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate_date

    @exchange_rate_date.setter
    def exchange_rate_date(self, exchange_rate_date):
        """Sets the exchange_rate_date of this Workspace.

        The exchange rate date that will be used to convert currency for your cost data.  # noqa: E501

        :param exchange_rate_date: The exchange_rate_date of this Workspace.  # noqa: E501
        :type: str
        """

        self._exchange_rate_date = exchange_rate_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workspace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Workspace):
            return True

        return self.to_dict() != other.to_dict()
