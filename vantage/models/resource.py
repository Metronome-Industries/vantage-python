# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'uuid': 'str',
        'type': 'str',
        'label': 'str',
        'metadata': 'str',
        'account_id': 'str',
        'billing_account_id': 'str',
        'provider': 'str',
        'region': 'str',
        'costs': 'list[ResourceCost]',
        'created_at': 'str'
    }

    attribute_map = {
        'token': 'token',
        'uuid': 'uuid',
        'type': 'type',
        'label': 'label',
        'metadata': 'metadata',
        'account_id': 'account_id',
        'billing_account_id': 'billing_account_id',
        'provider': 'provider',
        'region': 'region',
        'costs': 'costs',
        'created_at': 'created_at'
    }

    def __init__(self, token=None, uuid=None, type=None, label=None, metadata=None, account_id=None, billing_account_id=None, provider=None, region=None, costs=None, created_at=None, _configuration=None):  # noqa: E501
        """Resource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._uuid = None
        self._type = None
        self._label = None
        self._metadata = None
        self._account_id = None
        self._billing_account_id = None
        self._provider = None
        self._region = None
        self._costs = None
        self._created_at = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if uuid is not None:
            self.uuid = uuid
        if type is not None:
            self.type = type
        if label is not None:
            self.label = label
        if metadata is not None:
            self.metadata = metadata
        if account_id is not None:
            self.account_id = account_id
        if billing_account_id is not None:
            self.billing_account_id = billing_account_id
        if provider is not None:
            self.provider = provider
        if region is not None:
            self.region = region
        if costs is not None:
            self.costs = costs
        if created_at is not None:
            self.created_at = created_at

    @property
    def token(self):
        """Gets the token of this Resource.  # noqa: E501


        :return: The token of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Resource.


        :param token: The token of this Resource.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uuid(self):
        """Gets the uuid of this Resource.  # noqa: E501

        The unique identifier for the resource.  # noqa: E501

        :return: The uuid of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Resource.

        The unique identifier for the resource.  # noqa: E501

        :param uuid: The uuid of this Resource.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def type(self):
        """Gets the type of this Resource.  # noqa: E501

        The kind of resource.  # noqa: E501

        :return: The type of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.

        The kind of resource.  # noqa: E501

        :param type: The type of this Resource.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this Resource.  # noqa: E501


        :return: The label of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Resource.


        :param label: The label of this Resource.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def metadata(self):
        """Gets the metadata of this Resource.  # noqa: E501

        Type-specific attributes of the resource.  # noqa: E501

        :return: The metadata of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Resource.

        Type-specific attributes of the resource.  # noqa: E501

        :param metadata: The metadata of this Resource.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def account_id(self):
        """Gets the account_id of this Resource.  # noqa: E501

        The provider account where the resource is located.  # noqa: E501

        :return: The account_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Resource.

        The provider account where the resource is located.  # noqa: E501

        :param account_id: The account_id of this Resource.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def billing_account_id(self):
        """Gets the billing_account_id of this Resource.  # noqa: E501

        The provider billing account this resource is charged to.  # noqa: E501

        :return: The billing_account_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._billing_account_id

    @billing_account_id.setter
    def billing_account_id(self, billing_account_id):
        """Sets the billing_account_id of this Resource.

        The provider billing account this resource is charged to.  # noqa: E501

        :param billing_account_id: The billing_account_id of this Resource.  # noqa: E501
        :type: str
        """

        self._billing_account_id = billing_account_id

    @property
    def provider(self):
        """Gets the provider of this Resource.  # noqa: E501

        The provider of the resource.  # noqa: E501

        :return: The provider of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Resource.

        The provider of the resource.  # noqa: E501

        :param provider: The provider of this Resource.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this Resource.  # noqa: E501

        The region where the resource is located. Region values are specific to each provider.  # noqa: E501

        :return: The region of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Resource.

        The region where the resource is located. Region values are specific to each provider.  # noqa: E501

        :param region: The region of this Resource.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def costs(self):
        """Gets the costs of this Resource.  # noqa: E501

        The cost of the resource broken down by category.  # noqa: E501

        :return: The costs of this Resource.  # noqa: E501
        :rtype: list[ResourceCost]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this Resource.

        The cost of the resource broken down by category.  # noqa: E501

        :param costs: The costs of this Resource.  # noqa: E501
        :type: list[ResourceCost]
        """

        self._costs = costs

    @property
    def created_at(self):
        """Gets the created_at of this Resource.  # noqa: E501

        The date and time when Vantage first observed the resource.  # noqa: E501

        :return: The created_at of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Resource.

        The date and time when Vantage first observed the resource.  # noqa: E501

        :param created_at: The created_at of this Resource.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Resource):
            return True

        return self.to_dict() != other.to_dict()
