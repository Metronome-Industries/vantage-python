# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class CreateGCPIntegration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_account_id': 'str',
        'project_id': 'str',
        'dataset_name': 'str'
    }

    attribute_map = {
        'billing_account_id': 'billing_account_id',
        'project_id': 'project_id',
        'dataset_name': 'dataset_name'
    }

    def __init__(self, billing_account_id=None, project_id=None, dataset_name=None, _configuration=None):  # noqa: E501
        """CreateGCPIntegration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billing_account_id = None
        self._project_id = None
        self._dataset_name = None
        self.discriminator = None

        self.billing_account_id = billing_account_id
        self.project_id = project_id
        self.dataset_name = dataset_name

    @property
    def billing_account_id(self):
        """Gets the billing_account_id of this CreateGCPIntegration.  # noqa: E501

        GCP billing account ID.  # noqa: E501

        :return: The billing_account_id of this CreateGCPIntegration.  # noqa: E501
        :rtype: str
        """
        return self._billing_account_id

    @billing_account_id.setter
    def billing_account_id(self, billing_account_id):
        """Sets the billing_account_id of this CreateGCPIntegration.

        GCP billing account ID.  # noqa: E501

        :param billing_account_id: The billing_account_id of this CreateGCPIntegration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and billing_account_id is None:
            raise ValueError("Invalid value for `billing_account_id`, must not be `None`")  # noqa: E501

        self._billing_account_id = billing_account_id

    @property
    def project_id(self):
        """Gets the project_id of this CreateGCPIntegration.  # noqa: E501

        GCP project ID.  # noqa: E501

        :return: The project_id of this CreateGCPIntegration.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateGCPIntegration.

        GCP project ID.  # noqa: E501

        :param project_id: The project_id of this CreateGCPIntegration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def dataset_name(self):
        """Gets the dataset_name of this CreateGCPIntegration.  # noqa: E501

        BigQuery dataset name.  # noqa: E501

        :return: The dataset_name of this CreateGCPIntegration.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this CreateGCPIntegration.

        BigQuery dataset name.  # noqa: E501

        :param dataset_name: The dataset_name of this CreateGCPIntegration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dataset_name is None:
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")  # noqa: E501

        self._dataset_name = dataset_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateGCPIntegration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGCPIntegration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateGCPIntegration):
            return True

        return self.to_dict() != other.to_dict()
