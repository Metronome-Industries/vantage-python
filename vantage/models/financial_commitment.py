# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class FinancialCommitment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commitment_type': 'str',
        'service': 'str',
        'account': 'str',
        'type': 'str',
        'amount': 'str',
        'term': 'str',
        'payment_type': 'str',
        'region': 'str',
        'purchase_date': 'str',
        'expiration_date': 'str',
        'commitment': 'str',
        'status': 'str',
        'created_at': 'str',
        'workspace_token': 'str'
    }

    attribute_map = {
        'commitment_type': 'commitment_type',
        'service': 'service',
        'account': 'account',
        'type': 'type',
        'amount': 'amount',
        'term': 'term',
        'payment_type': 'payment_type',
        'region': 'region',
        'purchase_date': 'purchase_date',
        'expiration_date': 'expiration_date',
        'commitment': 'commitment',
        'status': 'status',
        'created_at': 'created_at',
        'workspace_token': 'workspace_token'
    }

    def __init__(self, commitment_type=None, service=None, account=None, type=None, amount=None, term=None, payment_type=None, region=None, purchase_date=None, expiration_date=None, commitment=None, status=None, created_at=None, workspace_token=None, _configuration=None):  # noqa: E501
        """FinancialCommitment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._commitment_type = None
        self._service = None
        self._account = None
        self._type = None
        self._amount = None
        self._term = None
        self._payment_type = None
        self._region = None
        self._purchase_date = None
        self._expiration_date = None
        self._commitment = None
        self._status = None
        self._created_at = None
        self._workspace_token = None
        self.discriminator = None

        if commitment_type is not None:
            self.commitment_type = commitment_type
        if service is not None:
            self.service = service
        if account is not None:
            self.account = account
        if type is not None:
            self.type = type
        if amount is not None:
            self.amount = amount
        if term is not None:
            self.term = term
        if payment_type is not None:
            self.payment_type = payment_type
        if region is not None:
            self.region = region
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if commitment is not None:
            self.commitment = commitment
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if workspace_token is not None:
            self.workspace_token = workspace_token

    @property
    def commitment_type(self):
        """Gets the commitment_type of this FinancialCommitment.  # noqa: E501

        The commitment type (eg Savings Plan or Reserved Instance).  # noqa: E501

        :return: The commitment_type of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._commitment_type

    @commitment_type.setter
    def commitment_type(self, commitment_type):
        """Sets the commitment_type of this FinancialCommitment.

        The commitment type (eg Savings Plan or Reserved Instance).  # noqa: E501

        :param commitment_type: The commitment_type of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._commitment_type = commitment_type

    @property
    def service(self):
        """Gets the service of this FinancialCommitment.  # noqa: E501

        The service this commitment applies towards.  # noqa: E501

        :return: The service of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this FinancialCommitment.

        The service this commitment applies towards.  # noqa: E501

        :param service: The service of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def account(self):
        """Gets the account of this FinancialCommitment.  # noqa: E501

        The account for this financial commitment.  # noqa: E501

        :return: The account of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this FinancialCommitment.

        The account for this financial commitment.  # noqa: E501

        :param account: The account of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def type(self):
        """Gets the type of this FinancialCommitment.  # noqa: E501

        The type of financial commitment.  # noqa: E501

        :return: The type of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FinancialCommitment.

        The type of financial commitment.  # noqa: E501

        :param type: The type of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this FinancialCommitment.  # noqa: E501

        The number of instances for the financial commitment.  # noqa: E501

        :return: The amount of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FinancialCommitment.

        The number of instances for the financial commitment.  # noqa: E501

        :param amount: The amount of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def term(self):
        """Gets the term of this FinancialCommitment.  # noqa: E501

        The duration in years of the financial commitment.  # noqa: E501

        :return: The term of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this FinancialCommitment.

        The duration in years of the financial commitment.  # noqa: E501

        :param term: The term of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def payment_type(self):
        """Gets the payment_type of this FinancialCommitment.  # noqa: E501

        The type of payment for the financial commitment.  # noqa: E501

        :return: The payment_type of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this FinancialCommitment.

        The type of payment for the financial commitment.  # noqa: E501

        :param payment_type: The payment_type of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def region(self):
        """Gets the region of this FinancialCommitment.  # noqa: E501

        The region for the financial commitment.  # noqa: E501

        :return: The region of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this FinancialCommitment.

        The region for the financial commitment.  # noqa: E501

        :param region: The region of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def purchase_date(self):
        """Gets the purchase_date of this FinancialCommitment.  # noqa: E501

        The purchase date of the financial commitment. ISO 8601 Formatted.  # noqa: E501

        :return: The purchase_date of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this FinancialCommitment.

        The purchase date of the financial commitment. ISO 8601 Formatted.  # noqa: E501

        :param purchase_date: The purchase_date of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._purchase_date = purchase_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this FinancialCommitment.  # noqa: E501

        The expiration date of the financial commitment. ISO 8601 Formatted.  # noqa: E501

        :return: The expiration_date of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this FinancialCommitment.

        The expiration date of the financial commitment. ISO 8601 Formatted.  # noqa: E501

        :param expiration_date: The expiration_date of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def commitment(self):
        """Gets the commitment of this FinancialCommitment.  # noqa: E501

        The amount of the financial commitment.  # noqa: E501

        :return: The commitment of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._commitment

    @commitment.setter
    def commitment(self, commitment):
        """Sets the commitment of this FinancialCommitment.

        The amount of the financial commitment.  # noqa: E501

        :param commitment: The commitment of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._commitment = commitment

    @property
    def status(self):
        """Gets the status of this FinancialCommitment.  # noqa: E501

        The status of the financial commitment (e.g. active vs expired).  # noqa: E501

        :return: The status of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FinancialCommitment.

        The status of the financial commitment (e.g. active vs expired).  # noqa: E501

        :param status: The status of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this FinancialCommitment.  # noqa: E501

        The date and time, in UTC, the Financial Commitment was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FinancialCommitment.

        The date and time, in UTC, the Financial Commitment was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def workspace_token(self):
        """Gets the workspace_token of this FinancialCommitment.  # noqa: E501

        The token for the Workspace the FinancialCommitment is a part of.  # noqa: E501

        :return: The workspace_token of this FinancialCommitment.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this FinancialCommitment.

        The token for the Workspace the FinancialCommitment is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this FinancialCommitment.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialCommitment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialCommitment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FinancialCommitment):
            return True

        return self.to_dict() != other.to_dict()
