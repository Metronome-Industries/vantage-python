# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class CostReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'title': 'str',
        'folder_token': 'str',
        'saved_filter_tokens': 'list[str]',
        'business_metric_tokens_with_metadata': 'list[AttachedBusinessMetricForCostReport]',
        'filter': 'str',
        'groupings': 'str',
        'settings': 'CreateCostReportSettings',
        'created_at': 'str',
        'workspace_token': 'str',
        'previous_period_start_date': 'str',
        'previous_period_end_date': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'date_interval': 'str',
        'chart_type': 'str',
        'date_bin': 'str'
    }

    attribute_map = {
        'token': 'token',
        'title': 'title',
        'folder_token': 'folder_token',
        'saved_filter_tokens': 'saved_filter_tokens',
        'business_metric_tokens_with_metadata': 'business_metric_tokens_with_metadata',
        'filter': 'filter',
        'groupings': 'groupings',
        'settings': 'settings',
        'created_at': 'created_at',
        'workspace_token': 'workspace_token',
        'previous_period_start_date': 'previous_period_start_date',
        'previous_period_end_date': 'previous_period_end_date',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'date_interval': 'date_interval',
        'chart_type': 'chart_type',
        'date_bin': 'date_bin'
    }

    def __init__(self, token=None, title=None, folder_token=None, saved_filter_tokens=None, business_metric_tokens_with_metadata=None, filter=None, groupings=None, settings=None, created_at=None, workspace_token=None, previous_period_start_date=None, previous_period_end_date=None, start_date=None, end_date=None, date_interval=None, chart_type=None, date_bin=None, _configuration=None):  # noqa: E501
        """CostReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._title = None
        self._folder_token = None
        self._saved_filter_tokens = None
        self._business_metric_tokens_with_metadata = None
        self._filter = None
        self._groupings = None
        self._settings = None
        self._created_at = None
        self._workspace_token = None
        self._previous_period_start_date = None
        self._previous_period_end_date = None
        self._start_date = None
        self._end_date = None
        self._date_interval = None
        self._chart_type = None
        self._date_bin = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if title is not None:
            self.title = title
        if folder_token is not None:
            self.folder_token = folder_token
        if saved_filter_tokens is not None:
            self.saved_filter_tokens = saved_filter_tokens
        if business_metric_tokens_with_metadata is not None:
            self.business_metric_tokens_with_metadata = business_metric_tokens_with_metadata
        if filter is not None:
            self.filter = filter
        if groupings is not None:
            self.groupings = groupings
        if settings is not None:
            self.settings = settings
        if created_at is not None:
            self.created_at = created_at
        if workspace_token is not None:
            self.workspace_token = workspace_token
        if previous_period_start_date is not None:
            self.previous_period_start_date = previous_period_start_date
        if previous_period_end_date is not None:
            self.previous_period_end_date = previous_period_end_date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if date_interval is not None:
            self.date_interval = date_interval
        if chart_type is not None:
            self.chart_type = chart_type
        if date_bin is not None:
            self.date_bin = date_bin

    @property
    def token(self):
        """Gets the token of this CostReport.  # noqa: E501


        :return: The token of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CostReport.


        :param token: The token of this CostReport.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def title(self):
        """Gets the title of this CostReport.  # noqa: E501

        The title of the CostReport.  # noqa: E501

        :return: The title of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CostReport.

        The title of the CostReport.  # noqa: E501

        :param title: The title of this CostReport.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def folder_token(self):
        """Gets the folder_token of this CostReport.  # noqa: E501

        The token for the Folder the CostReport is a part of.  # noqa: E501

        :return: The folder_token of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._folder_token

    @folder_token.setter
    def folder_token(self, folder_token):
        """Sets the folder_token of this CostReport.

        The token for the Folder the CostReport is a part of.  # noqa: E501

        :param folder_token: The folder_token of this CostReport.  # noqa: E501
        :type: str
        """

        self._folder_token = folder_token

    @property
    def saved_filter_tokens(self):
        """Gets the saved_filter_tokens of this CostReport.  # noqa: E501

        The tokens for the SavedFilters assigned to the CostReport.  # noqa: E501

        :return: The saved_filter_tokens of this CostReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._saved_filter_tokens

    @saved_filter_tokens.setter
    def saved_filter_tokens(self, saved_filter_tokens):
        """Sets the saved_filter_tokens of this CostReport.

        The tokens for the SavedFilters assigned to the CostReport.  # noqa: E501

        :param saved_filter_tokens: The saved_filter_tokens of this CostReport.  # noqa: E501
        :type: list[str]
        """

        self._saved_filter_tokens = saved_filter_tokens

    @property
    def business_metric_tokens_with_metadata(self):
        """Gets the business_metric_tokens_with_metadata of this CostReport.  # noqa: E501

        The tokens for the BusinessMetrics assigned to the CostReport, the unit scale, and label filter.  # noqa: E501

        :return: The business_metric_tokens_with_metadata of this CostReport.  # noqa: E501
        :rtype: list[AttachedBusinessMetricForCostReport]
        """
        return self._business_metric_tokens_with_metadata

    @business_metric_tokens_with_metadata.setter
    def business_metric_tokens_with_metadata(self, business_metric_tokens_with_metadata):
        """Sets the business_metric_tokens_with_metadata of this CostReport.

        The tokens for the BusinessMetrics assigned to the CostReport, the unit scale, and label filter.  # noqa: E501

        :param business_metric_tokens_with_metadata: The business_metric_tokens_with_metadata of this CostReport.  # noqa: E501
        :type: list[AttachedBusinessMetricForCostReport]
        """

        self._business_metric_tokens_with_metadata = business_metric_tokens_with_metadata

    @property
    def filter(self):
        """Gets the filter of this CostReport.  # noqa: E501

        The filter applied to the CostReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :return: The filter of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CostReport.

        The filter applied to the CostReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :param filter: The filter of this CostReport.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def groupings(self):
        """Gets the groupings of this CostReport.  # noqa: E501

        The grouping aggregations applied to the filtered data.  # noqa: E501

        :return: The groupings of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._groupings

    @groupings.setter
    def groupings(self, groupings):
        """Sets the groupings of this CostReport.

        The grouping aggregations applied to the filtered data.  # noqa: E501

        :param groupings: The groupings of this CostReport.  # noqa: E501
        :type: str
        """

        self._groupings = groupings

    @property
    def settings(self):
        """Gets the settings of this CostReport.  # noqa: E501


        :return: The settings of this CostReport.  # noqa: E501
        :rtype: CreateCostReportSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CostReport.


        :param settings: The settings of this CostReport.  # noqa: E501
        :type: CreateCostReportSettings
        """

        self._settings = settings

    @property
    def created_at(self):
        """Gets the created_at of this CostReport.  # noqa: E501

        The date and time, in UTC, the report was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CostReport.

        The date and time, in UTC, the report was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this CostReport.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def workspace_token(self):
        """Gets the workspace_token of this CostReport.  # noqa: E501

        The token for the Workspace the CostReport is a part of.  # noqa: E501

        :return: The workspace_token of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this CostReport.

        The token for the Workspace the CostReport is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this CostReport.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    @property
    def previous_period_start_date(self):
        """Gets the previous_period_start_date of this CostReport.  # noqa: E501

        The previous period start date of the CostReport. ISO 8601 Formatted.  # noqa: E501

        :return: The previous_period_start_date of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._previous_period_start_date

    @previous_period_start_date.setter
    def previous_period_start_date(self, previous_period_start_date):
        """Sets the previous_period_start_date of this CostReport.

        The previous period start date of the CostReport. ISO 8601 Formatted.  # noqa: E501

        :param previous_period_start_date: The previous_period_start_date of this CostReport.  # noqa: E501
        :type: str
        """

        self._previous_period_start_date = previous_period_start_date

    @property
    def previous_period_end_date(self):
        """Gets the previous_period_end_date of this CostReport.  # noqa: E501

        The previous period end date of the CostReport. ISO 8601 Formatted.  # noqa: E501

        :return: The previous_period_end_date of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._previous_period_end_date

    @previous_period_end_date.setter
    def previous_period_end_date(self, previous_period_end_date):
        """Sets the previous_period_end_date of this CostReport.

        The previous period end date of the CostReport. ISO 8601 Formatted.  # noqa: E501

        :param previous_period_end_date: The previous_period_end_date of this CostReport.  # noqa: E501
        :type: str
        """

        self._previous_period_end_date = previous_period_end_date

    @property
    def start_date(self):
        """Gets the start_date of this CostReport.  # noqa: E501

        The start date of the CostReports. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :return: The start_date of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CostReport.

        The start date of the CostReports. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :param start_date: The start_date of this CostReport.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CostReport.  # noqa: E501

        The end date of the CostReports. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :return: The end_date of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CostReport.

        The end date of the CostReports. ISO 8601 Formatted. Overwrites 'date_interval' if set.  # noqa: E501

        :param end_date: The end_date of this CostReport.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def date_interval(self):
        """Gets the date_interval of this CostReport.  # noqa: E501

        The date interval of the CostReport.  # noqa: E501

        :return: The date_interval of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._date_interval

    @date_interval.setter
    def date_interval(self, date_interval):
        """Sets the date_interval of this CostReport.

        The date interval of the CostReport.  # noqa: E501

        :param date_interval: The date_interval of this CostReport.  # noqa: E501
        :type: str
        """

        self._date_interval = date_interval

    @property
    def chart_type(self):
        """Gets the chart_type of this CostReport.  # noqa: E501

        The chart type of the CostReport.  # noqa: E501

        :return: The chart_type of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this CostReport.

        The chart type of the CostReport.  # noqa: E501

        :param chart_type: The chart_type of this CostReport.  # noqa: E501
        :type: str
        """

        self._chart_type = chart_type

    @property
    def date_bin(self):
        """Gets the date_bin of this CostReport.  # noqa: E501

        The date bin of the CostReport.  # noqa: E501

        :return: The date_bin of this CostReport.  # noqa: E501
        :rtype: str
        """
        return self._date_bin

    @date_bin.setter
    def date_bin(self, date_bin):
        """Sets the date_bin of this CostReport.

        The date bin of the CostReport.  # noqa: E501

        :param date_bin: The date_bin of this CostReport.  # noqa: E501
        :type: str
        """

        self._date_bin = date_bin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CostReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CostReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CostReport):
            return True

        return self.to_dict() != other.to_dict()
