# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class UpdateKubernetesEfficiencyReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'filter': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'date_interval': 'str',
        'aggregated_by': 'str',
        'date_bucket': 'str',
        'groupings': 'list[str]'
    }

    attribute_map = {
        'title': 'title',
        'filter': 'filter',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'date_interval': 'date_interval',
        'aggregated_by': 'aggregated_by',
        'date_bucket': 'date_bucket',
        'groupings': 'groupings'
    }

    def __init__(self, title=None, filter=None, start_date=None, end_date=None, date_interval=None, aggregated_by=None, date_bucket=None, groupings=None, _configuration=None):  # noqa: E501
        """UpdateKubernetesEfficiencyReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._filter = None
        self._start_date = None
        self._end_date = None
        self._date_interval = None
        self._aggregated_by = None
        self._date_bucket = None
        self._groupings = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if filter is not None:
            self.filter = filter
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if date_interval is not None:
            self.date_interval = date_interval
        if aggregated_by is not None:
            self.aggregated_by = aggregated_by
        if date_bucket is not None:
            self.date_bucket = date_bucket
        if groupings is not None:
            self.groupings = groupings

    @property
    def title(self):
        """Gets the title of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The title of the KubernetesEfficiencyReport.  # noqa: E501

        :return: The title of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateKubernetesEfficiencyReport.

        The title of the KubernetesEfficiencyReport.  # noqa: E501

        :param title: The title of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def filter(self):
        """Gets the filter of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The filter query language to apply to the KubernetesEfficiencyReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :return: The filter of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this UpdateKubernetesEfficiencyReport.

        The filter query language to apply to the KubernetesEfficiencyReport. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :param filter: The filter of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def start_date(self):
        """Gets the start_date of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The start date of the KubernetesEfficiencyReport. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :return: The start_date of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UpdateKubernetesEfficiencyReport.

        The start date of the KubernetesEfficiencyReport. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :param start_date: The start_date of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The end date of the KubernetesEfficiencyReport. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :return: The end_date of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UpdateKubernetesEfficiencyReport.

        The end date of the KubernetesEfficiencyReport. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.  # noqa: E501

        :param end_date: The end_date of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def date_interval(self):
        """Gets the date_interval of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The date interval of the KubernetesEfficiencyReport. Incompatible with 'start_date' and 'end_date' parameters. Defaults to 'this_month' if start_date and end_date are not provided.  # noqa: E501

        :return: The date_interval of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: str
        """
        return self._date_interval

    @date_interval.setter
    def date_interval(self, date_interval):
        """Sets the date_interval of this UpdateKubernetesEfficiencyReport.

        The date interval of the KubernetesEfficiencyReport. Incompatible with 'start_date' and 'end_date' parameters. Defaults to 'this_month' if start_date and end_date are not provided.  # noqa: E501

        :param date_interval: The date_interval of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["this_month", "last_7_days", "last_30_days", "last_month", "last_3_months", "last_6_months", "custom", "last_12_months", "last_24_months", "last_36_months", "next_month", "next_3_months", "next_6_months", "next_12_months", "year_to_date", "last_3_days"]  # noqa: E501
        if (self._configuration.client_side_validation and
                date_interval not in allowed_values):
            raise ValueError(
                "Invalid value for `date_interval` ({0}), must be one of {1}"  # noqa: E501
                .format(date_interval, allowed_values)
            )

        self._date_interval = date_interval

    @property
    def aggregated_by(self):
        """Gets the aggregated_by of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The column by which the costs are aggregated.  # noqa: E501

        :return: The aggregated_by of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: str
        """
        return self._aggregated_by

    @aggregated_by.setter
    def aggregated_by(self, aggregated_by):
        """Sets the aggregated_by of this UpdateKubernetesEfficiencyReport.

        The column by which the costs are aggregated.  # noqa: E501

        :param aggregated_by: The aggregated_by of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["idle_cost", "amount", "cost_efficiency"]  # noqa: E501
        if (self._configuration.client_side_validation and
                aggregated_by not in allowed_values):
            raise ValueError(
                "Invalid value for `aggregated_by` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregated_by, allowed_values)
            )

        self._aggregated_by = aggregated_by

    @property
    def date_bucket(self):
        """Gets the date_bucket of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        The date bucket of the KubernetesEfficiencyReport.  # noqa: E501

        :return: The date_bucket of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: str
        """
        return self._date_bucket

    @date_bucket.setter
    def date_bucket(self, date_bucket):
        """Sets the date_bucket of this UpdateKubernetesEfficiencyReport.

        The date bucket of the KubernetesEfficiencyReport.  # noqa: E501

        :param date_bucket: The date_bucket of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["day", "week", "month"]  # noqa: E501
        if (self._configuration.client_side_validation and
                date_bucket not in allowed_values):
            raise ValueError(
                "Invalid value for `date_bucket` ({0}), must be one of {1}"  # noqa: E501
                .format(date_bucket, allowed_values)
            )

        self._date_bucket = date_bucket

    @property
    def groupings(self):
        """Gets the groupings of this UpdateKubernetesEfficiencyReport.  # noqa: E501

        Grouping values for aggregating costs on the KubernetesEfficiencyReport. Valid groupings: cluster_id, namespace, labeled, category, label, label:<label_name>.  # noqa: E501

        :return: The groupings of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._groupings

    @groupings.setter
    def groupings(self, groupings):
        """Sets the groupings of this UpdateKubernetesEfficiencyReport.

        Grouping values for aggregating costs on the KubernetesEfficiencyReport. Valid groupings: cluster_id, namespace, labeled, category, label, label:<label_name>.  # noqa: E501

        :param groupings: The groupings of this UpdateKubernetesEfficiencyReport.  # noqa: E501
        :type: list[str]
        """

        self._groupings = groupings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateKubernetesEfficiencyReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateKubernetesEfficiencyReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateKubernetesEfficiencyReport):
            return True

        return self.to_dict() != other.to_dict()
