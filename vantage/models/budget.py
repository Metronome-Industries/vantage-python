# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Budget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'name': 'str',
        'workspace_token': 'str',
        'user_token': 'str',
        'created_by_token': 'str',
        'cost_report_token': 'str',
        'created_at': 'str',
        'budget_alert_tokens': 'list[str]',
        'child_budget_tokens': 'list[str]',
        'periods': 'list[BudgetPeriod]',
        'performance': 'list[BudgetPerformance]'
    }

    attribute_map = {
        'token': 'token',
        'name': 'name',
        'workspace_token': 'workspace_token',
        'user_token': 'user_token',
        'created_by_token': 'created_by_token',
        'cost_report_token': 'cost_report_token',
        'created_at': 'created_at',
        'budget_alert_tokens': 'budget_alert_tokens',
        'child_budget_tokens': 'child_budget_tokens',
        'periods': 'periods',
        'performance': 'performance'
    }

    def __init__(self, token=None, name=None, workspace_token=None, user_token=None, created_by_token=None, cost_report_token=None, created_at=None, budget_alert_tokens=None, child_budget_tokens=None, periods=None, performance=None, _configuration=None):  # noqa: E501
        """Budget - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._name = None
        self._workspace_token = None
        self._user_token = None
        self._created_by_token = None
        self._cost_report_token = None
        self._created_at = None
        self._budget_alert_tokens = None
        self._child_budget_tokens = None
        self._periods = None
        self._performance = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if name is not None:
            self.name = name
        if workspace_token is not None:
            self.workspace_token = workspace_token
        if user_token is not None:
            self.user_token = user_token
        if created_by_token is not None:
            self.created_by_token = created_by_token
        if cost_report_token is not None:
            self.cost_report_token = cost_report_token
        if created_at is not None:
            self.created_at = created_at
        if budget_alert_tokens is not None:
            self.budget_alert_tokens = budget_alert_tokens
        if child_budget_tokens is not None:
            self.child_budget_tokens = child_budget_tokens
        if periods is not None:
            self.periods = periods
        if performance is not None:
            self.performance = performance

    @property
    def token(self):
        """Gets the token of this Budget.  # noqa: E501


        :return: The token of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Budget.


        :param token: The token of this Budget.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def name(self):
        """Gets the name of this Budget.  # noqa: E501

        The name of the Budget.  # noqa: E501

        :return: The name of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Budget.

        The name of the Budget.  # noqa: E501

        :param name: The name of this Budget.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def workspace_token(self):
        """Gets the workspace_token of this Budget.  # noqa: E501

        The token for the Workspace the Budget is a part of.  # noqa: E501

        :return: The workspace_token of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._workspace_token

    @workspace_token.setter
    def workspace_token(self, workspace_token):
        """Sets the workspace_token of this Budget.

        The token for the Workspace the Budget is a part of.  # noqa: E501

        :param workspace_token: The workspace_token of this Budget.  # noqa: E501
        :type: str
        """

        self._workspace_token = workspace_token

    @property
    def user_token(self):
        """Gets the user_token of this Budget.  # noqa: E501

        The token for the User who created this Budget.  # noqa: E501

        :return: The user_token of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._user_token

    @user_token.setter
    def user_token(self, user_token):
        """Sets the user_token of this Budget.

        The token for the User who created this Budget.  # noqa: E501

        :param user_token: The user_token of this Budget.  # noqa: E501
        :type: str
        """

        self._user_token = user_token

    @property
    def created_by_token(self):
        """Gets the created_by_token of this Budget.  # noqa: E501

        The token of the Creator of the Budget.  # noqa: E501

        :return: The created_by_token of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._created_by_token

    @created_by_token.setter
    def created_by_token(self, created_by_token):
        """Sets the created_by_token of this Budget.

        The token of the Creator of the Budget.  # noqa: E501

        :param created_by_token: The created_by_token of this Budget.  # noqa: E501
        :type: str
        """

        self._created_by_token = created_by_token

    @property
    def cost_report_token(self):
        """Gets the cost_report_token of this Budget.  # noqa: E501

        The token of the Report associated with the Budget.  # noqa: E501

        :return: The cost_report_token of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._cost_report_token

    @cost_report_token.setter
    def cost_report_token(self, cost_report_token):
        """Sets the cost_report_token of this Budget.

        The token of the Report associated with the Budget.  # noqa: E501

        :param cost_report_token: The cost_report_token of this Budget.  # noqa: E501
        :type: str
        """

        self._cost_report_token = cost_report_token

    @property
    def created_at(self):
        """Gets the created_at of this Budget.  # noqa: E501

        The date and time, in UTC, the Budget was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this Budget.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Budget.

        The date and time, in UTC, the Budget was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this Budget.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def budget_alert_tokens(self):
        """Gets the budget_alert_tokens of this Budget.  # noqa: E501

        The tokens of the BudgetAlerts associated with the Budget.  # noqa: E501

        :return: The budget_alert_tokens of this Budget.  # noqa: E501
        :rtype: list[str]
        """
        return self._budget_alert_tokens

    @budget_alert_tokens.setter
    def budget_alert_tokens(self, budget_alert_tokens):
        """Sets the budget_alert_tokens of this Budget.

        The tokens of the BudgetAlerts associated with the Budget.  # noqa: E501

        :param budget_alert_tokens: The budget_alert_tokens of this Budget.  # noqa: E501
        :type: list[str]
        """

        self._budget_alert_tokens = budget_alert_tokens

    @property
    def child_budget_tokens(self):
        """Gets the child_budget_tokens of this Budget.  # noqa: E501

        The tokens of the child Budgets associated with the hierarchical Budget.  # noqa: E501

        :return: The child_budget_tokens of this Budget.  # noqa: E501
        :rtype: list[str]
        """
        return self._child_budget_tokens

    @child_budget_tokens.setter
    def child_budget_tokens(self, child_budget_tokens):
        """Sets the child_budget_tokens of this Budget.

        The tokens of the child Budgets associated with the hierarchical Budget.  # noqa: E501

        :param child_budget_tokens: The child_budget_tokens of this Budget.  # noqa: E501
        :type: list[str]
        """

        self._child_budget_tokens = child_budget_tokens

    @property
    def periods(self):
        """Gets the periods of this Budget.  # noqa: E501

        The budget periods associated with the Budget.  # noqa: E501

        :return: The periods of this Budget.  # noqa: E501
        :rtype: list[BudgetPeriod]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this Budget.

        The budget periods associated with the Budget.  # noqa: E501

        :param periods: The periods of this Budget.  # noqa: E501
        :type: list[BudgetPeriod]
        """

        self._periods = periods

    @property
    def performance(self):
        """Gets the performance of this Budget.  # noqa: E501

        The historical performance of the Budget.  # noqa: E501

        :return: The performance of this Budget.  # noqa: E501
        :rtype: list[BudgetPerformance]
        """
        return self._performance

    @performance.setter
    def performance(self, performance):
        """Sets the performance of this Budget.

        The historical performance of the Budget.  # noqa: E501

        :param performance: The performance of this Budget.  # noqa: E501
        :type: list[BudgetPerformance]
        """

        self._performance = performance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Budget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Budget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Budget):
            return True

        return self.to_dict() != other.to_dict()
