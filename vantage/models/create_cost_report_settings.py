# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class CreateCostReportSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_credits': 'bool',
        'include_refunds': 'bool',
        'include_discounts': 'bool',
        'include_tax': 'bool',
        'amortize': 'bool',
        'unallocated': 'bool',
        'aggregate_by': 'str'
    }

    attribute_map = {
        'include_credits': 'include_credits',
        'include_refunds': 'include_refunds',
        'include_discounts': 'include_discounts',
        'include_tax': 'include_tax',
        'amortize': 'amortize',
        'unallocated': 'unallocated',
        'aggregate_by': 'aggregate_by'
    }

    def __init__(self, include_credits=False, include_refunds=False, include_discounts=True, include_tax=True, amortize=True, unallocated=False, aggregate_by='cost', _configuration=None):  # noqa: E501
        """CreateCostReportSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._include_credits = None
        self._include_refunds = None
        self._include_discounts = None
        self._include_tax = None
        self._amortize = None
        self._unallocated = None
        self._aggregate_by = None
        self.discriminator = None

        if include_credits is not None:
            self.include_credits = include_credits
        if include_refunds is not None:
            self.include_refunds = include_refunds
        if include_discounts is not None:
            self.include_discounts = include_discounts
        if include_tax is not None:
            self.include_tax = include_tax
        if amortize is not None:
            self.amortize = amortize
        if unallocated is not None:
            self.unallocated = unallocated
        if aggregate_by is not None:
            self.aggregate_by = aggregate_by

    @property
    def include_credits(self):
        """Gets the include_credits of this CreateCostReportSettings.  # noqa: E501

        Report will include credits.  # noqa: E501

        :return: The include_credits of this CreateCostReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_credits

    @include_credits.setter
    def include_credits(self, include_credits):
        """Sets the include_credits of this CreateCostReportSettings.

        Report will include credits.  # noqa: E501

        :param include_credits: The include_credits of this CreateCostReportSettings.  # noqa: E501
        :type: bool
        """

        self._include_credits = include_credits

    @property
    def include_refunds(self):
        """Gets the include_refunds of this CreateCostReportSettings.  # noqa: E501

        Report will include refunds.  # noqa: E501

        :return: The include_refunds of this CreateCostReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_refunds

    @include_refunds.setter
    def include_refunds(self, include_refunds):
        """Sets the include_refunds of this CreateCostReportSettings.

        Report will include refunds.  # noqa: E501

        :param include_refunds: The include_refunds of this CreateCostReportSettings.  # noqa: E501
        :type: bool
        """

        self._include_refunds = include_refunds

    @property
    def include_discounts(self):
        """Gets the include_discounts of this CreateCostReportSettings.  # noqa: E501

        Report will include discounts.  # noqa: E501

        :return: The include_discounts of this CreateCostReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_discounts

    @include_discounts.setter
    def include_discounts(self, include_discounts):
        """Sets the include_discounts of this CreateCostReportSettings.

        Report will include discounts.  # noqa: E501

        :param include_discounts: The include_discounts of this CreateCostReportSettings.  # noqa: E501
        :type: bool
        """

        self._include_discounts = include_discounts

    @property
    def include_tax(self):
        """Gets the include_tax of this CreateCostReportSettings.  # noqa: E501

        Report will include tax.  # noqa: E501

        :return: The include_tax of this CreateCostReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_tax

    @include_tax.setter
    def include_tax(self, include_tax):
        """Sets the include_tax of this CreateCostReportSettings.

        Report will include tax.  # noqa: E501

        :param include_tax: The include_tax of this CreateCostReportSettings.  # noqa: E501
        :type: bool
        """

        self._include_tax = include_tax

    @property
    def amortize(self):
        """Gets the amortize of this CreateCostReportSettings.  # noqa: E501

        Report will amortize.  # noqa: E501

        :return: The amortize of this CreateCostReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._amortize

    @amortize.setter
    def amortize(self, amortize):
        """Sets the amortize of this CreateCostReportSettings.

        Report will amortize.  # noqa: E501

        :param amortize: The amortize of this CreateCostReportSettings.  # noqa: E501
        :type: bool
        """

        self._amortize = amortize

    @property
    def unallocated(self):
        """Gets the unallocated of this CreateCostReportSettings.  # noqa: E501

        Report will show unallocated costs.  # noqa: E501

        :return: The unallocated of this CreateCostReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._unallocated

    @unallocated.setter
    def unallocated(self, unallocated):
        """Sets the unallocated of this CreateCostReportSettings.

        Report will show unallocated costs.  # noqa: E501

        :param unallocated: The unallocated of this CreateCostReportSettings.  # noqa: E501
        :type: bool
        """

        self._unallocated = unallocated

    @property
    def aggregate_by(self):
        """Gets the aggregate_by of this CreateCostReportSettings.  # noqa: E501

        Report will aggregate by cost or usage.  # noqa: E501

        :return: The aggregate_by of this CreateCostReportSettings.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_by

    @aggregate_by.setter
    def aggregate_by(self, aggregate_by):
        """Sets the aggregate_by of this CreateCostReportSettings.

        Report will aggregate by cost or usage.  # noqa: E501

        :param aggregate_by: The aggregate_by of this CreateCostReportSettings.  # noqa: E501
        :type: str
        """

        self._aggregate_by = aggregate_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCostReportSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCostReportSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCostReportSettings):
            return True

        return self.to_dict() != other.to_dict()
