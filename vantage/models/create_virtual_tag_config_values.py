# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class CreateVirtualTagConfigValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'str',
        'name': 'str',
        'business_metric_token': 'str',
        'cost_metric': 'CreateVirtualTagConfigCostMetric'
    }

    attribute_map = {
        'filter': 'filter',
        'name': 'name',
        'business_metric_token': 'business_metric_token',
        'cost_metric': 'cost_metric'
    }

    def __init__(self, filter=None, name=None, business_metric_token=None, cost_metric=None, _configuration=None):  # noqa: E501
        """CreateVirtualTagConfigValues - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filter = None
        self._name = None
        self._business_metric_token = None
        self._cost_metric = None
        self.discriminator = None

        self.filter = filter
        if name is not None:
            self.name = name
        if business_metric_token is not None:
            self.business_metric_token = business_metric_token
        if cost_metric is not None:
            self.cost_metric = cost_metric

    @property
    def filter(self):
        """Gets the filter of this CreateVirtualTagConfigValues.  # noqa: E501

        The filter query language to apply to the value. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :return: The filter of this CreateVirtualTagConfigValues.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CreateVirtualTagConfigValues.

        The filter query language to apply to the value. Additional documentation available at https://docs.vantage.sh/vql.  # noqa: E501

        :param filter: The filter of this CreateVirtualTagConfigValues.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    @property
    def name(self):
        """Gets the name of this CreateVirtualTagConfigValues.  # noqa: E501

        The name of the value.  # noqa: E501

        :return: The name of this CreateVirtualTagConfigValues.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVirtualTagConfigValues.

        The name of the value.  # noqa: E501

        :param name: The name of this CreateVirtualTagConfigValues.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def business_metric_token(self):
        """Gets the business_metric_token of this CreateVirtualTagConfigValues.  # noqa: E501

        The token of an associated business metric.  # noqa: E501

        :return: The business_metric_token of this CreateVirtualTagConfigValues.  # noqa: E501
        :rtype: str
        """
        return self._business_metric_token

    @business_metric_token.setter
    def business_metric_token(self, business_metric_token):
        """Sets the business_metric_token of this CreateVirtualTagConfigValues.

        The token of an associated business metric.  # noqa: E501

        :param business_metric_token: The business_metric_token of this CreateVirtualTagConfigValues.  # noqa: E501
        :type: str
        """

        self._business_metric_token = business_metric_token

    @property
    def cost_metric(self):
        """Gets the cost_metric of this CreateVirtualTagConfigValues.  # noqa: E501


        :return: The cost_metric of this CreateVirtualTagConfigValues.  # noqa: E501
        :rtype: CreateVirtualTagConfigCostMetric
        """
        return self._cost_metric

    @cost_metric.setter
    def cost_metric(self, cost_metric):
        """Sets the cost_metric of this CreateVirtualTagConfigValues.


        :param cost_metric: The cost_metric of this CreateVirtualTagConfigValues.  # noqa: E501
        :type: CreateVirtualTagConfigCostMetric
        """

        self._cost_metric = cost_metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVirtualTagConfigValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVirtualTagConfigValues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateVirtualTagConfigValues):
            return True

        return self.to_dict() != other.to_dict()
