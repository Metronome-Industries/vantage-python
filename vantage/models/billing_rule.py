# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class BillingRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'title': 'str',
        'type': 'str',
        'created_by_token': 'str',
        'created_at': 'str',
        'service': 'str',
        'category': 'str',
        'percentage': 'str',
        'charge_type': 'str',
        'sub_category': 'str',
        'start_period': 'str',
        'amount': 'str'
    }

    attribute_map = {
        'token': 'token',
        'title': 'title',
        'type': 'type',
        'created_by_token': 'created_by_token',
        'created_at': 'created_at',
        'service': 'service',
        'category': 'category',
        'percentage': 'percentage',
        'charge_type': 'charge_type',
        'sub_category': 'sub_category',
        'start_period': 'start_period',
        'amount': 'amount'
    }

    def __init__(self, token=None, title=None, type=None, created_by_token=None, created_at=None, service=None, category=None, percentage=None, charge_type=None, sub_category=None, start_period=None, amount=None, _configuration=None):  # noqa: E501
        """BillingRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._title = None
        self._type = None
        self._created_by_token = None
        self._created_at = None
        self._service = None
        self._category = None
        self._percentage = None
        self._charge_type = None
        self._sub_category = None
        self._start_period = None
        self._amount = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if created_by_token is not None:
            self.created_by_token = created_by_token
        if created_at is not None:
            self.created_at = created_at
        if service is not None:
            self.service = service
        if category is not None:
            self.category = category
        if percentage is not None:
            self.percentage = percentage
        if charge_type is not None:
            self.charge_type = charge_type
        if sub_category is not None:
            self.sub_category = sub_category
        if start_period is not None:
            self.start_period = start_period
        if amount is not None:
            self.amount = amount

    @property
    def token(self):
        """Gets the token of this BillingRule.  # noqa: E501


        :return: The token of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BillingRule.


        :param token: The token of this BillingRule.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def title(self):
        """Gets the title of this BillingRule.  # noqa: E501

        The title of the Billing Rule.  # noqa: E501

        :return: The title of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BillingRule.

        The title of the Billing Rule.  # noqa: E501

        :param title: The title of this BillingRule.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this BillingRule.  # noqa: E501

        The type of the Billing Rule.  # noqa: E501

        :return: The type of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BillingRule.

        The type of the Billing Rule.  # noqa: E501

        :param type: The type of this BillingRule.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_by_token(self):
        """Gets the created_by_token of this BillingRule.  # noqa: E501

        The token of the Creator of the Billing Rule.  # noqa: E501

        :return: The created_by_token of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._created_by_token

    @created_by_token.setter
    def created_by_token(self, created_by_token):
        """Sets the created_by_token of this BillingRule.

        The token of the Creator of the Billing Rule.  # noqa: E501

        :param created_by_token: The created_by_token of this BillingRule.  # noqa: E501
        :type: str
        """

        self._created_by_token = created_by_token

    @property
    def created_at(self):
        """Gets the created_at of this BillingRule.  # noqa: E501

        The date and time, in UTC, the Billing Rule was created. ISO 8601 Formatted.  # noqa: E501

        :return: The created_at of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BillingRule.

        The date and time, in UTC, the Billing Rule was created. ISO 8601 Formatted.  # noqa: E501

        :param created_at: The created_at of this BillingRule.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def service(self):
        """Gets the service of this BillingRule.  # noqa: E501

        The service for the Billing Rule (Charge).  # noqa: E501

        :return: The service of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BillingRule.

        The service for the Billing Rule (Charge).  # noqa: E501

        :param service: The service of this BillingRule.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def category(self):
        """Gets the category of this BillingRule.  # noqa: E501

        The category for the Billing Rule (Charge).  # noqa: E501

        :return: The category of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BillingRule.

        The category for the Billing Rule (Charge).  # noqa: E501

        :param category: The category of this BillingRule.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def percentage(self):
        """Gets the percentage of this BillingRule.  # noqa: E501

        The percentage of the cost shown for the Billing Rule (Adjustment).  # noqa: E501

        :return: The percentage of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this BillingRule.

        The percentage of the cost shown for the Billing Rule (Adjustment).  # noqa: E501

        :param percentage: The percentage of this BillingRule.  # noqa: E501
        :type: str
        """

        self._percentage = percentage

    @property
    def charge_type(self):
        """Gets the charge_type of this BillingRule.  # noqa: E501

        The charge type for the Billing Rule.  # noqa: E501

        :return: The charge_type of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this BillingRule.

        The charge type for the Billing Rule.  # noqa: E501

        :param charge_type: The charge_type of this BillingRule.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def sub_category(self):
        """Gets the sub_category of this BillingRule.  # noqa: E501

        The subcategory for the Billing Rule (Charge).  # noqa: E501

        :return: The sub_category of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this BillingRule.

        The subcategory for the Billing Rule (Charge).  # noqa: E501

        :param sub_category: The sub_category of this BillingRule.  # noqa: E501
        :type: str
        """

        self._sub_category = sub_category

    @property
    def start_period(self):
        """Gets the start_period of this BillingRule.  # noqa: E501

        The start period for the Billing Rule (Charge).  # noqa: E501

        :return: The start_period of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._start_period

    @start_period.setter
    def start_period(self, start_period):
        """Sets the start_period of this BillingRule.

        The start period for the Billing Rule (Charge).  # noqa: E501

        :param start_period: The start_period of this BillingRule.  # noqa: E501
        :type: str
        """

        self._start_period = start_period

    @property
    def amount(self):
        """Gets the amount of this BillingRule.  # noqa: E501

        The amount for the Billing Rule (Charge).  # noqa: E501

        :return: The amount of this BillingRule.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BillingRule.

        The amount for the Billing Rule (Charge).  # noqa: E501

        :param amount: The amount of this BillingRule.  # noqa: E501
        :type: str
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingRule):
            return True

        return self.to_dict() != other.to_dict()
